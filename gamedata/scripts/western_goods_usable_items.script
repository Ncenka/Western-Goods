--- Original Author(s) : NLTP_ASHES
--- Edited : N/A
--- Date : 03/03/2023
--- License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)
---
--- Script used to manage the various usable items from the Western Goods addon.

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

local dbg_printf = western_goods_utils.dbg_printf
local round_number = western_goods_utils.round_number
local has_translation = western_goods_utils.has_translation
local get_translation = game.translate_string
local find_object_by_id = western_goods_utils.find_object_by_id
local CreatePersistentTimeEvent = western_goods_persistent_timed_events.CreatePersistentTimeEvent

local ini_cigarette_tools = ini_file([[plugins\cigarettes\cigarette_tools.ltx]])
local ini_campfire_tools = ini_file([[plugins\campfires\campfire_tools.ltx]])
local cigarette_tools = {}
local campfire_tools = {}

-- ---------------------------------------------------------------------------------------------------------------------
-- Usable Items
-- ---------------------------------------------------------------------------------------------------------------------


--- Function used to return the text written when right clicking on a lighter.
--- @param obj game_object
--- @return string
function menu_use(obj)
    return get_translation("st_wg_use")
end

--- Function used to return the text written when right clicking on a magazine.
--- @param obj game_object
--- @return string
function menu_view(obj)
    return get_translation("st_wg_view")
end

--- Function used to return the text written when right clicking on an MRE.
--- @param obj game_object
--- @return string
function menu_unpack(obj)
    return get_translation("st_wg_unpack")
end

--- Function called by callback when any object in the game is used. This redirects to the proper functions if the item used is one from Western Goods.
--- @param obj game_object
--- @return nil
function use_item(obj,_,cf)

    -- GPS Locator
    if (obj:section() == "wg_gps") then
        dbg_printf("[WG] Used %s",obj:section())
        use_gps(obj)
        return
    end

    -- French MRE
    if (obj:section() == "wg_french_mre") then
        dbg_printf("[WG] Used %s",obj:section())
        use_french_mre(obj)
        return
    end

    -- Toblerone
    if (obj:section() == "wg_toblerone") then
        dbg_printf("[WG] Used %s",obj:section())
        use_toblerone(obj)
        return
    end

    -- Campfires
    for _,tool in pairs(campfire_tools) do
        if obj:section() == tool then
            dbg_printf("[WG] Used %s",obj:section())
            bind_campfire.campfire_go_on(obj, cf)
            return
        end
    end

    -- Magazines
    local magazines = western_goods_core.table_items_by_type(western_goods_core.western_goods_items, "magazine")
    for item_id,_ in pairs(magazines) do
        if western_goods_core.table_item_field_by_key(magazines, item_id, "section") == obj:section() then
            dbg_printf("[WG] Used %s",obj:section())
            if (get_hud()) then
                hide_hud_inventory()
            end
            western_goods_magazine_ui.display(obj:section())
            return
        end
    end
end


-- ---------------------------------------------------------------------------------------------------------------------
-- GPS Locator
-- ---------------------------------------------------------------------------------------------------------------------

--- Function called when the gps locator is used by the player.
--- @param obj game_object
--- @return nil
function use_gps(obj)
	utils_xml.hide_menu()

	-- Get the name and distance to the closest smart terrain, as well as the level's name
    local closest_smart_name, closest_smart_distance, closest_smart_level = find_info_from_game_world()

	-- If the smart terrain doesn't have a translation, we retry using the PDA instead
	if closest_smart_name and not has_translation(closest_smart_name) then
		dbg_printf("[WG] Smart terrain found but no translation. Fallback to PDA info")
		closest_smart_name, closest_smart_distance, closest_smart_level = find_info_from_pda()
	end

	actor_menu.set_msg(1, build_on_screen_message(closest_smart_name, closest_smart_distance, closest_smart_level), 7)
end

--- Function used to get the name, distance to the closest smart terrain (as well as level name) using info from the game world.
--- @return string
--- @return string
--- @return string
function find_info_from_game_world()

	local smart = alife_object(smart_terrain.nearest_to_actor_smart.id)
	
	local closest_smart_name = smart:name()
	local closest_smart_distance = smart.dist_to_actor
	local closest_smart_level = alife():level_name(smart.level_id)

    dbg_printf("[WG] Closest smart (game world) %s - %s (%s)", closest_smart_name, closest_smart_distance, closest_smart_level)
	
	return closest_smart_name, closest_smart_distance, closest_smart_level
end

--- Function used to get the name, distance to the closest smart terrain (as well as level name) using info from the pda map.
--- @return string
--- @return string
--- @return string
function find_info_from_pda()

	local closest_smart_name, closest_smart_distance, closest_smart_level

	for _,v in pairs(pda_primary_objects_tbl) do
		local smart_id = get_story_object_id(v.target)
        local smart_obj = find_object_by_id(smart_id)
		if smart_obj then
			local this_smart_name = v.target
			local this_smart_distance = smart_obj:position():distance_to(db.actor:position())
			local this_smart_level = level.name()	

			if (this_smart_distance <= (closest_smart_distance or this_smart_distance)) then
				closest_smart_name = this_smart_name
				closest_smart_distance = this_smart_distance
				closest_smart_level = this_smart_level
			end
		end
	end
	
	dbg_printf("[WG] Closest smart (PDA) %s - %s (%s)", closest_smart_name, closest_smart_distance, closest_smart_level)
	
	return closest_smart_name, closest_smart_distance, closest_smart_level
end

--- Function used to build the message the message displayed on screen when using the GPS device.
--- @param closest_smart_name string
--- @param closest_smart_distance string
--- @param closest_smart_level string
--- @return string
function build_on_screen_message(closest_smart_name, closest_smart_distance, closest_smart_level)
	-- Build the message to print on-screen
	local message
	
	-- If we're missing (like properly missing) one of the info, we say we don't know where we are
	if not (closest_smart_name and closest_smart_distance and closest_smart_level) then
		message = get_translation("st_wg_gps_use_2")
	
	-- If we have all the info, but the distance is infinite (happens when there are no smarts on your current level), we just print the level name
	elseif string.find(closest_smart_distance,"inf") then
		message = get_translation("st_wg_gps_use_3")
	
	else
		-- If the smart terrain's name can be translated, we use the translation. Otherwise, we don't show that information
		if has_translation(closest_smart_name) then
			message = get_translation(closest_smart_name) .. " - " .. round_number(closest_smart_distance) .. "m "
		else
			-- If we can't find a translation with the smart name, maybe the PDA hint has a translation
			for k,v in pairs(pda_primary_objects_tbl) do
				if v.target == closest_smart_name and has_translation(v.hint) then
					message = get_translation(v.hint) .. " - " .. round_number(closest_smart_distance) .. "m "
				end
			end
		end
		
		-- If the level name can be translation, we use the translation. Otherwise, we don't show that information
		if has_translation(closest_smart_level) then
			message = (message or "") .. "(" .. get_translation(closest_smart_level) .. ")"
		end

		-- If at this point we still don't have a string (because things don't have translations), we say we don't know where we are
		if not(message) then
			message = get_translation("st_wg_gps_use_4")
		end
	end
	
	return get_translation("st_wg_gps_use_1") .. " " .. message
end


-- ---------------------------------------------------------------------------------------------------------------------
-- Lighter
-- ---------------------------------------------------------------------------------------------------------------------

BuildHeader = ui_item.build_desc_header
--- Function used to display the fill level of the lighter in the inventory.
--- @param obj game_object
--- @param sec string
--- @param str string
function ui_item.build_desc_header(obj, sec, str)
    str = str or gc(ini_sys:r_string_ex(sec, "description"))
    if (not str) then return "" end

    if obj:section() == "wg_lighter_bic" then
        local con = math.ceil(obj:condition() * 100)
        local clr = utils_xml.get_color_con(con)
        local clr_2  = utils_xml.get_color("ui_gray_1")
        local _str = clr .. " • " .. clr_2 .. game.translate_string("st_wg_fill") .. ": " .. clr .. tostring(con) .. "%" .. "\\n \\n" .. clr_2
        return _str .. BuildHeader(obj, sec, str)
    end

    return BuildHeader(obj, sec, str)
end

BeforeUse = itms_manager.actor_on_item_before_use
--- Function used to allow the lighter to light cigarettes.
--- @param obj game_object
--- @param flags table
function itms_manager.actor_on_item_before_use(obj,flags)
    local sec = obj:section()

    -- no need to check for tools
    if IsItem("tool",sec) then
        --printf("- actor_on_item_before_use [%s] | ignore utility item", sec)
        flags.ret_value = true
        return
    end

    local curr_booster = {}
    local time_g = time_global()
    local str = ""
    local pass = true

    -- read important boosts
    local period		= ini_sys:r_float_ex(sec, "boost_time") or 0
    local rad_boost 	= ini_sys:r_float_ex(sec, "boost_radiation_restore") or 0
    local psy_boost 	= ini_sys:r_float_ex(sec, "boost_telepat_protection") or 0
    local bld_boost 	= ini_sys:r_float_ex(sec, "boost_bleeding_restore") or 0
    local hp_boost 		= ini_sys:r_float_ex(sec, "boost_health_restore") or 0
    local pwr_boost 	= ini_sys:r_float_ex(sec, "boost_power_restore") or 0

    -- if an item is required
    local required_tool_legacy = ini_sys:r_string_ex(sec, "required_tool")
    local required_tools = ini_sys:r_string_ex(sec, "require_cig_tool") and cigarette_tools or {}

    if required_tool_legacy and not western_goods_utils.table_contains(required_tools, required_tool_legacy) then
        table.insert(required_tools, required_tool_legacy)
    end

    local obj_tool
    if not is_empty(required_tools) then
        for _,tool in pairs(required_tools) do
            local curr_tool = tool and ini_sys:section_exist(tool) and db.actor:object(tool)
            if curr_tool then
                obj_tool = curr_tool
                break
            end
        end
    end

    -- store boosts in a table
    curr_booster["section"]   = sec
    curr_booster["period"]	  = (period > 0) and (time_g + period*1000) or time_g
    curr_booster["pwr"]       = (pwr_boost > itms_manager.boost_min) and pwr_boost or 0
    curr_booster["psy"]       = (psy_boost > itms_manager.boost_min) and psy_boost or 0
    curr_booster["bld"]       = (bld_boost > itms_manager.boost_min) and bld_boost or 0
    curr_booster["hp"]        = (hp_boost > itms_manager.boost_min) and hp_boost or 0
    curr_booster["rad"]       = (rad_boost > itms_manager.boost_min) and rad_boost or 0

    -- A required tool is missing -> no eat
    if not is_empty(required_tools) and not obj_tool then
        dbg_printf("[WG] Before Use Item | Require tools\n%s", utils_data.print_table(required_tools, false, true))
        dbg_printf("[WG] Before Use Item | Object tool '%s'",obj_tool)
        for pos,tool in pairs(required_tools) do
            str = str .. ui_item.get_sec_name(tool) .. (western_goods_utils.has_next(required_tools,pos) and " or " or " ")
        end
        str = str .. game.translate_string("st_wg_missing_requirements_ext")
        pass = false

    -- older booster is still active
    elseif itms_manager.old_booster["period"] and (itms_manager.old_booster["period"] > time_g) then
        --printf("~ actor_on_item_before_use [%s] | older booster [%s] is still active", sec, old_booster['section'])
        local weaker_effect
        local stronger_effect
        for k,v in pairs(curr_booster) do
            if (k ~= "section") and (k ~= "period") then
                local v2 = itms_manager.old_booster[k]
                if v2  and (v > itms_manager.boost_min) and (v2 > itms_manager.boost_min) then
                    if (v <= v2) then
                        weaker_effect = k
                    else
                        stronger_effect = k
                    end
                elseif (v2 == 0) and (v > itms_manager.boost_min) then
                    stronger_effect = k
                end
            end
        end

        -- older booster has some stronger effect, while new one doesn't have any stronger effect
        if weaker_effect and (not stronger_effect) then
            --printf("~ actor_on_item_before_use [%s] | older booster [%s] has stronger effect: %s", sec, old_booster['section'], weaker_effect)
            local boost_str = game.translate_string(itms_manager.booster_string[weaker_effect])
            str = strformat(game.translate_string("st_itm_manager_greater_effect"),boost_str)
            pass = false
        end

    -- prevent player to take anabiotic during combat
    elseif sec == "drug_anabiotic" then
        if (not is_empty(xr_combat_ignore.fighting_with_actor_npcs)) then
            str = game.translate_string("st_anabiotic_combat")
            pass = false
        end
    end

    -- to eat or not to eat
    if pass then
        --printf("- actor_on_item_before_use [%s] | pass = true", sec)
        flags.ret_value = true
        copy_table(itms_manager.old_booster, curr_booster)
        if obj_tool then
            dbg_printf("[WG] Before Use Item | Require tools\n%s", utils_data.print_table(required_tools, false, true))
            dbg_printf("[WG] Before Use Item | Object tool '%s'",obj_tool:section())
            if IsItem("multiuse",obj_tool:section()) then
                dbg_printf("[WG] Before Use Item | Discharging '%s'",obj_tool:section())
                utils_item.discharge(obj_tool, 1)
            else
                dbg_printf("[WG] Before Use Item | Degrading '%s'",obj_tool:section())
                utils_item.degrade(obj_tool, 0.05)
            end
        end
    else
        --printf("! actor_on_item_before_use [%s] | pass = false", sec)
        flags.ret_value = false

        utils_xml.hide_menu()
        actor_menu.set_msg(1, str,3)
    end
end

CampfireGoOn = bind_campfire.campfire_go_on
--- Function used to light up a campfire if the conditions are right.
--- @param obj game_object
--- @param cf campfire_binder
function bind_campfire.campfire_go_on(obj, cf)
    local cf = cf or bind_campfire.get_nearby_campfire(bind_campfire.dist_cf,true)
    if (not cf) then
        return
    end

    if (cf:is_on()) then
        return
    end

    if bind_campfire.rain_pass() then
        if (bind_campfire.k_rain < 1)then
            bind_campfire.k_rain = bind_campfire.k_rain + 1
            actor_menu.set_msg(1, game.translate_string("st_camp_help"),3)
        end
        actor_effects.play_item_fx("matches_script")
        --local snd_obj = sound_object("interface\\inv_matches")
        --snd_obj:play(db.actor,0,sound_object.s2d)
        xr_sound.set_sound_play(AC_ID,"inv_matches")
        cf:turn_on()
    else
        actor_effects.play_item_fx("matches_script")
        actor_menu.set_msg(1, game.translate_string("st_fail"),3)
    end

    dbg_printf("[WG] Campfire Go On | Object tool '%s'",obj:section())
    if IsItem("multiuse",obj:section()) then
        dbg_printf("[WG] Campfire Go On | Discharging '%s'",obj:section())
        utils_item.discharge(obj, 1)
    else
        dbg_printf("[WG] Campfire Go On | Degrading '%s'",obj:section())
        utils_item.degrade(obj, 0.05)
    end
end

UseCampfire = bind_campfire.use_campfire
--- Function called from game_tutorials.xml when the player interacts with a campfire.
--- @param actor game_object
--- @param zone space_restrictor
--- @param p table
function bind_campfire.use_campfire(actor,zone,p)
    local pos = db.actor:position()
    for id,binder in pairs(bind_campfire.campfires_all) do
        if (binder and binder.campfire) then
            if (pos:distance_to_sqr(binder.object:position()) <= 2) then
                if (binder.campfire:is_on()) then
                    bind_campfire.campfire_go_off(binder.campfire)
                else
                    for _,tool in pairs(campfire_tools) do
                        local obj_item = ini_sys:section_exist(tool) and db.actor:object(tool)
                        if obj_item then
                            dbg_printf("[WG] Use Campfire | Campfire tools\n%s", utils_data.print_table(campfire_tools, false, true))
                            dbg_printf("[WG] Use Campfire | Object item '%s'",obj_item:section())
                            use_item(obj_item, nil, binder.campfire)
                            return
                        end

                        actor_menu.set_msg(1, game.translate_string("st_ui_campfire_prereq"),3)
                    end
                end
            end
        end
    end
end

function retrieve_cigarette_tools()
    ini_cigarette_tools:section_for_each(function(section)
        local section = utils_data.collect_section(ini_cigarette_tools, section, true)
        for tool,_ in pairs (section) do
            if not western_goods_utils.table_contains(cigarette_tools, tool) then
                table.insert(cigarette_tools, tool)
            end
        end
    end)
    dbg_printf("[WG] Retrieve Cigarette Tools | cigarette_tools :\n%s", utils_data.print_table(cigarette_tools, false, true))
end

function retrieve_campfire_tools()
    ini_campfire_tools:section_for_each(function(section)
        local section = utils_data.collect_section(ini_campfire_tools, section, true)
        for tool,_ in pairs (section) do
            if not western_goods_utils.table_contains(campfire_tools, tool) then
                table.insert(campfire_tools, tool)
            end
        end
    end)
    dbg_printf("[WG] Retrieve Campfire Tools | campfire_tools :\n%s", utils_data.print_table(campfire_tools, false, true))
end

-- ---------------------------------------------------------------------------------------------------------------------
-- French MRE
-- ---------------------------------------------------------------------------------------------------------------------

--- Function called when the RCIR item is used by the player.
--- @param obj game_object
--- @return nil
function use_french_mre(obj)
    alife_release(alife_object(obj:id()))

    local content = str_explode(SYS_GetParam(0, obj:section(), "content"), ",")

    for _,item in pairs(content) do
        local section = str_explode(item, ":")[1]
        local quantity = str_explode(item, ":")[2]

        if (SYS_GetParam(1, obj:section(), "use_condition")) then
            alife_create_item(section, db.actor, {uses = quantity})
        else
            for i=1,quantity do
                alife_create_item(section, db.actor)
            end
        end
    end
end


-- ---------------------------------------------------------------------------------------------------------------------
-- Toblerone
-- ---------------------------------------------------------------------------------------------------------------------

--- Function called when the Toblorone item is used by the player.
--- @param obj game_object
--- @return nil
function use_toblerone(obj)
    CreatePersistentTimeEvent("western_goods_delay","toblerone_mask",2,function()
        level.add_pp_effector("yantar_underground_psi.ppe", 57742, false)
        return true
    end)
    CreatePersistentTimeEvent("western_goods_delay","force_sleep",6,function()
        level.remove_pp_effector(57742)
        actor_status_thirst.force_sleep()
        return true
    end)
end


-- ---------------------------------------------------------------------------------------------------------------------
-- Callbacks registration
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to register callbacks.
--- @return nil
function on_game_start()
    RegisterScriptCallback("actor_on_item_use", use_item)
    RegisterScriptCallback("actor_on_first_update", retrieve_cigarette_tools)
    RegisterScriptCallback("actor_on_first_update", retrieve_campfire_tools)
end


-- ---------------------------------------------------------------------------------------------------------------------
-- pda.script's primary_objects_tbl table.
-- Cannot be accessed from outside the script so this is the next best thing.
-- ---------------------------------------------------------------------------------------------------------------------

pda_primary_objects_tbl = {
    {target="mar_2c_01_anomaly_spot",					        hint="st_mar_2c_01_anomaly_spot_name"},
    {target="mar_2c_02_anomaly_spot",					        hint="st_mar_2c_02_anomaly_spot_name"},
    {target="ds_2c_01_anomaly_spot",					        hint="st_ds_2c_01_anomaly_spot_name"},
    {target="ds_2c_02_anomaly_spot",					        hint="st_ds_2c_02_anomaly_spot_name"},
    {target="ds_2c_03_anomaly_spot",					        hint="st_ds_2c_03_anomaly_spot_name"},
    {target="ds_2c_04_anomaly_spot",					        hint="st_ds_2c_04_anomaly_spot_name"},
    {target="trc_2c_01_rift_anom_spot",					    hint="st_trc_2c_01_rift_anom_spot_name"},
    {target="trc_2c_02_chem_anom_spot",					    hint="st_trc_2c_02_chem_anom_spot_name"},
    {target="trc_2c_03_desolation_anom_spot",			        hint="st_trc_2c_03_desolation_anom_spot_name"},
    {target="esc_2c_01_high_hopes_anomaly_spot",		        hint="st_esc_2c_01_high_hopes_anomaly_spot_name"},
    {target="gar_2c_01_nwi_anomaly_spot",				        hint="st_gar_2c_01_nwi_anomaly_spot_name"},
    {target="gar_2c_02_toaster_anomaly_spot",			        hint="st_gar_2c_02_toaster_anomaly_spot_name"},
    {target="agr_2c_01_hg_anomaly_spot",				        hint="st_agr_2c_01_hg_anomaly_spot_name"},
    -- Undergound anomalies are commented out until we can have underground minimaps.
    --{target="labx18_2c_01_deep_burn_anomaly_spot",	        hint="st_labx18_2c_01_deep_burn_anomaly_spot_name"},
    --{target="labx18_2c_02_ff_anomaly_spot",			        hint="st_labx18_2c_02_ff_anomaly_spot_name"},
    --{target="labx18_2c_03_elders_anomaly_spot",		        hint="st_labx18_2c_03_elders_anomaly_spot_name"},
    --{target="labx18_2c_04_bioh_anomaly_spot",			        hint="st_labx18_2c_04_bioh_anomaly_spot_name"},
    {target="bar_2c_01_grant_anomaly_spot",				    hint="st_bar_2c_01_grant_anomaly_spot_name"},
    {target="ros_2c_01_tunnel_anomaly_spot",			        hint="st_ros_2c_01_tunnel_anomaly_spot_name"},
    {target="ros_2c_02_crispy_train_anomaly_spot",		    hint="st_ros_2c_02_crispy_train_anomaly_spot_name"},
    {target="ros_2c_03_yc_anomaly_spot",				        hint="st_ros_2c_03_yc_anomaly_spot_name"},
    {target="mil_2c_01_hw_anomaly_spot",				        hint="st_mil_2c_01_hw_anomaly_spot_name"},
    {target="yan_2c_01_cd_anomaly_spot",				        hint="st_yan_2c_01_cd_anomaly_spot_name"},
    --{target="x16_lab_2c_01_fb_anomy_spot",			        hint="st_x16_lab_2c_01_fb_anomy_spot_name"},
    {target="cit_2c_01_ch_anomaly_spot",				        hint="st_cit_2c_01_ch_anomaly_spot_name"},
    {target="cit_2c_02_pg_anomaly_spot",				        hint="st_cit_2c_02_pg_anomaly_spot_name"},
    {target="lim_2c_01_ls_anomaly_spot",				        hint="st_lim_2c_01_ls_anomaly_spot_name"},
    {target="lim_2c_02_ib_anomaly_spot",				        hint="st_lim_2c_02_ib_anomaly_spot_name"},
    {target="rad_2c_01_bl_anomaly_spot",				        hint="st_rad_2c_01_bl_anomaly_spot_name"},
    {target="rad_2c_02_pp_anomaly_spot",				        hint="st_rad_2c_02_pp_anomaly_spot_name"},
    --{target="bun_2c_01_f_anomaly_spot",				        hint="st_bun_2c_01_f_anomaly_spot_name"},
    --{target="bun_2c_02_gp_anomaly_spot",				        hint="st_bun_2c_02_gp_anomaly_spot_name"},
    {target="pri_2c_01_pp_anomaly_spot",				        hint="st_pri_2c_01_pp_anomaly_spot_name"},
    {target="pri_2c_02_gt_anomaly_spot",				        hint="st_pri_2c_02_gt_anomaly_spot_name"},
    {target="pri_2c_03_wr_anomaly_spot",				        hint="st_pri_2c_03_wr_anomaly_spot_name"},
    {target="pri_2c_04_o_anomaly_spot",					    hint="st_pri_2c_04_o_anomaly_spot_name"},
    {target="aes_2c_01_ce_anomaly_spot",				        hint="st_aes_2c_01_ce_anomaly_spot_name"},
    {target="aes_2c_02_p_anomaly_spot",					    hint="st_aes_2c_02_p_anomaly_spot_name"},
    {target="aes2_2c_01_bo_anomaly_spot",				        hint="st_aes2_2c_01_bo_anomaly_spot_name"},
    {target="aes2_2c_02_at_anomaly_spot",				        hint="st_aes2_2c_02_at_anomaly_spot_name"},
    --{target="sar_2c_01_r_anomaly_spot",				        hint="st_sar_2c_01_r_anomaly_spot_name"},
    {target="gen_2c_01_ss_anomaly_spot",				        hint="st_gen_2c_01_ss_anomaly_spot_name"},
    {target="mar_smart_terrain_11_3_anomaly_spot",		    hint="st_mar_smart_terrain_11_3_anomaly_spot_name"},
    {target="mar_smart_terrain_10_10_anomaly_spot",		    hint="st_mar_smart_terrain_10_10_anomaly_spot_name"},
    {target="mar_smart_terrain_base_anomaly_spot",		    hint="st_mar_smart_terrain_base_anomaly_spot_name"},
    {target="mar_smart_terrain_8_8_anomaly_spot",		        hint="st_mar_smart_terrain_8_8_anomaly_spot_name"},
    {target="mar_smart_terrain_12_2_anomaly_spot",		    hint="st_mar_smart_terrain_12_2_anomaly_spot_name"},
    {target="mar_smart_terrain_3_7_anomaly_spot",		        hint="st_mar_smart_terrain_3_7_anomaly_spot_name"},
    {target="mar_smart_terrain_3_3_anomaly_spot",		        hint="st_mar_smart_terrain_3_3_anomaly_spot_name"},
    {target="esc_smart_terrain_1_11_anomaly_spot",		    hint="st_esc_smart_terrain_1_11_anomaly_spot_name"},
    {target="esc_smart_terrain_8_9_anomaly_spot",		        hint="st_esc_smart_terrain_8_9_anomaly_spot_name"},
    {target="esc_smart_terrain_5_4_anomaly_spot",		        hint="st_esc_smart_terrain_5_4_anomaly_spot_name"},
    {target="gar_smart_terrain_3_7_anomaly_spot",		        hint="st_gar_smart_terrain_3_7_anomaly_spot_name"},
    {target="gar_smart_terrain_3_7_anomaly_spot_2",		    hint="st_gar_smart_terrain_3_7_anomaly_spot_2_name"},
    {target="gar_smart_terrain_2_4_anomaly_spot",		        hint="st_gar_smart_terrain_2_4_anomaly_spot_name"},
    {target="gar_smart_terrain_6_7_anomaly_spot",		        hint="st_gar_smart_terrain_6_7_anomaly_spot_name"},
    {target="gar_smart_terrain_5_6_anomaly_spot",		        hint="st_gar_smart_terrain_5_6_anomaly_spot_name"},
    {target="gar_smart_terrain_1_7_anomaly_spot",		        hint="st_gar_smart_terrain_1_7_anomaly_spot_name"},
    {target="agr_smart_terrain_1_3_anomaly_spot",		        hint="st_agr_smart_terrain_1_3_anomaly_spot_name"},
    {target="agr_smart_terrain_4_4_near_3_anomaly_spot",      hint="st_agr_smart_terrain_4_4_near_3_anomaly_spot_name"},
    {target="agr_smart_terrain_5_7_anomaly_spot", 		    hint="st_agr_smart_terrain_5_7_anomaly_spot_name"},
    {target="agr_smart_terrain_5_2_anomaly_spot", 		    hint="st_agr_smart_terrain_5_2_anomaly_spot_name"},
    {target="agr_smart_terrain_1_2_anomaly_spot", 		    hint="st_agr_smart_terrain_1_2_anomaly_spot_name"},
    {target="val_smart_terrain_9_10_anomaly_spot",		    hint="st_val_smart_terrain_9_10_anomaly_spot_name"},
    {target="val_smart_terrain_6_4_anomaly_spot",		        hint="st_val_smart_terrain_6_4_anomaly_spot_name"},
    {target="val_smart_terrain_8_6_anomaly_spot",		        hint="st_val_smart_terrain_8_6_anomaly_spot_name"},
    {target="val_smart_terrain_9_4_anomaly_spot",		        hint="st_val_smart_terrain_9_4_anomaly_spot_name"},
    {target="val_smart_terrain_8_9_anomaly_spot",		        hint="st_val_smart_terrain_8_9_anomaly_spot_name"},
    {target="mil_smart_terrain_4_7_anomaly_spot",		        hint="st_mil_smart_terrain_4_7_anomaly_spot_name"},
    {target="mil_smart_terrain_2_1_anomaly_spot",		        hint="st_mil_smart_terrain_2_1_anomaly_spot_name"},
    {target="mil_smart_terrain_2_6_anomaly_spot",		        hint="st_mil_smart_terrain_2_6_anomaly_spot_name"},
    {target="mil_smart_terrain_7_4_anomaly_spot",		        hint="st_mil_smart_terrain_7_4_anomaly_spot_name"},
    {target="mil_smart_terrain_8_3_anomaly_spot",		        hint="st_mil_smart_terrain_8_3_anomaly_spot_name"},
    {target="yan_smart_terrain_2_5_anomaly_spot",		        hint="st_yan_smart_terrain_2_5_anomaly_spot_name"},
    {target="yan_smart_terrain_zombi_spawn_anomaly_spot",		hint="st_yan_smart_terrain_zombi_spawn_anomaly_spot_name"},
    {target="yan_smart_terrain_5_3_anomaly_spot",		        hint="st_yan_smart_terrain_5_3_anomaly_spot_name"},
    {target="yan_smart_terrain_4_2_anomaly_spot",		        hint="st_yan_smart_terrain_4_2_anomaly_spot_name"},
    {target="red_smart_terrain_6_3_anomaly_spot",		        hint="st_red_smart_terrain_6_3_anomaly_spot_name"},
    {target="red_smart_terrain_4_5_anomaly_spot",		        hint="st_red_smart_terrain_4_5_anomaly_spot_name"},
    {target="red_smart_terrain_monsters_anomaly_spot",	    hint="st_red_smart_terrain_monsters_anomaly_spot_name"},
    {target="red_smart_terrain_3_2_anomaly_spot",		        hint="st_red_smart_terrain_3_2_anomaly_spot_name"},
    {target="red_smart_terrain_6_6_anomaly_spot",		        hint="st_red_smart_terrain_6_6_anomaly_spot_name"},
    {target="red_smart_terrain_3_1_anomaly_spot",		        hint="st_red_smart_terrain_3_1_anomaly_spot_name"},
    {target="gen_smart_terrain_urod_anomaly_spot",		    hint="st_gen_smart_terrain_urod_anomaly_spot_name"},
    {target="trc_sim_13_anomal_zone_spot",				    hint="st_trc_sim_13_anomal_zone_spot_name"},

    -- POLE
    {target="pol_smart_terrain_1_2_anomaly_spot",		        hint="st_pol_smart_terrain_1_2_anomaly_spot_name"},

    -- MLR
    {target="dasc_treesucker_state_spot",	                    hint="st_dasc_treesucker_state_name"},
    {target="tc_smart_terrain_bandit_base_spot",	            hint="st_tc_bandit_base_name"},
    {target="rad_smart_terrain_kpp_spot",	                    hint="st_tc_kpp_name"},
    {target="rad_smart_terrain_vert_spot",	                hint="st_tc_vert_name"},
    {target="radar_smart_terrain_first_zastava_spot",	        hint="st_radar_first_zastava_name"},
    {target="rad_smart_terrain_bunker_spot",	                hint="st_rad_bunker_name"},
    {target="red_smart_terrain_dark_yar_spot",	            hint="st_red_dark_yar_name"},
    {target="red_smart_terrain_central_mine_spot",	        hint="st_red_central_mine_name"},
    {target="red_smart_terrain_crap_spot",	                hint="st_red_crap_name"},
    {target="agr_smart_terrai_SRI_spot",	                    hint="st_agr_SRI_name"},
    {target="mar_smart_terrain_post_spot",	                hint="st_lim_post_vishka_name"},
    {target="mar_smart_terrain_old_church_spot",	            hint="st_lim_old_church_name"},
    {target="mar_smart_terrain_village_csky_spot",	        hint="st_lim_village_csky_name"},
    {target="mar_smart_terrain_water_pump_station_spot",	    hint="st_lim_water_pump_station_name"},
    {target="mar_smart_terrain_mechanic_yard_spot",	        hint="st_lim_mechanic_yard_name"},
    {target="red_smart_terrain_bridge_spot",	                hint="st_lim_bridge_name"},
    {target="red_smart_terrain_house_lesnik_spot",	        hint="st_lim_house_lesnik_name"},
    {target="lim_smart_first_zastava_spot",	                hint="st_lim_zastava_name"},
    {target="lim_smart_bubbles_spot",                  	    hint="st_lim_bubbles_name"},
    {target="lim_smart_nonbuild_spot",		                hint="st_lim_nonbuild_name"},
    {target="lim_smart_dyga_spot",		                    hint="st_lim_dyga_name"},
    {target="ds_smart_administration_spot",	                hint="st_ds_administration_name"},
    {target="ds_smart_market_spot",                  	        hint="st_ds_market_name"},
    {target="ds_smart_house_of_culture_spot",		            hint="st_ds_HoC_name"},
    {target="esc_smart_terrain_novice_village_spot",	        hint="st_novice_village_name"},
    {target="esc_smart_terrain_south_blokpost_spot",	        hint="st_south_blokpost_name"},
    {target="esc_smart_terrain_ATP_spot",		                hint="st_ATP_name"},
    {target="esc_smart_terrain_elevator_spot",		        hint="st_elevator_name"},
    {target="esc_smart_terrain_tunnel_electr_spot",		    hint="st_tunnel_electr_name"},
    {target="esc_smart_terrain_neut_base_spot",		        hint="st_neut_base_name"},
    {target="esc_smart_terrain_north_blockpost_spot",	        hint="st_north_blockpost_name"},
    {target="dar_smart_terrain_farm_spot",		            hint="st_dar_farm_name"},
    {target="dar_smart_terrain_complex_proizv_spot",	        hint="st_dar_complex_name"},
    {target="mil_smart_terrain_bs_village_spot",	            hint="st_bs_village_name"},
    {target="mil_smart_terrain_base_freedom_spot",		    hint="st_base_freedom_name"},
    {target="mil_smart_terrain_border_spot",	                hint="st_border_name"},
    {target="pri_smart_terrain_mon_base_spot",	            hint="st_mon_base_name"},
    {target="pri_smart_terrain_hotel_poless_spot",		    hint="st_hotel_poless_name"},
    {target="pri_smart_terrain_big_bus_station_spot",	        hint="st_big_bus_station_name"},
    {target="gar_smart_terrain_6_3_baraholka_spot",		    hint="st_gar_baraholka_name"},
    {target="gar_smart_terrain_dolg_outpost_spot",		    hint="st_gar_outpost_name"},
    {target="gar_smart_terrain_3_5_angar_spot",		        hint="st_gar_angar_name"},
    {target="bar_smart_terrain_bar100rent_spot",		        hint="st_bar100rent_name"},
    {target="yan_smart_terrain_6_4_bunker_spot",		        hint="st_yanbunker_name"},
    {target="yan_smart_terrain_proizvcomplex_spot",		    hint="st_yancomplex_name"},

    {target="zat_b55_spot",		                            hint="st_zat_b55_name_land"},
    {target="zat_b100_spot",	                                hint="st_zat_b100_name_land"},
    {target="zat_b104_spot",	                                hint="st_zat_b104_name_land"},
    {target="zat_b38_spot", 	                                hint="st_zat_b38_name_land"},
    {target="zat_b40_spot",	                                hint="st_zat_b40_name_land"},
    {target="zat_b56_spot",		                            hint="st_zat_b56_name_land"},
    {target="zat_b5_spot",  	                                hint="st_zat_b5_name_land"},
    {target="zat_a2_spot",  	                                hint="st_zat_a2_name_land"},
    {target="zat_b20_spot",  	                                hint="st_zat_b20_name_land"},
    {target="zat_b20_spot",		                            hint="st_zat_fire_name_land"},
    {target="zat_b53_spot",		                            hint="st_zat_b53_name_land"},
    {target="zat_b101_spot",	                                hint="st_zat_b101_name_land"},
    {target="zat_b101_spot",	                                hint="st_zat_waste_name_land"},
    {target="zat_b106_spot",	                                hint="st_zat_b106_name_land"},
    {target="zat_b7_spot",  	                                hint="st_zat_b7_name_land"},
    {target="zat_b14_spot",  	                                hint="st_zat_b14_name_land"},
    {target="zat_b14_spot",		                            hint="st_zat_tide_name_land"},
    {target="zat_b52_spot",  	                                hint="st_zat_b52_name_land"},
    {target="zat_b39_spot",		                            hint="st_zat_b39_name_land"},
    {target="zat_b33_spot",  	                                hint="st_zat_b33_name_land"},
    {target="zat_b18_spot",  	                                hint="st_zat_b18_name_land"},
    {target="zat_b54_spot",		                            hint="st_zat_b54_name_land"},
    {target="zat_b12_spot",  	                                hint="st_zat_b12_name_land"},
    {target="zat_b28_spot",  	                                hint="st_zat_b28_name_land"},
    {target="zat_b103_spot",	                                hint="st_zat_b103_name_land"},
    {target="jup_b1_spot",		                            hint="st_jup_b1_name_land"},
    {target="jup_b46_spot",  	                                hint="st_jup_b46_name_land"},
    {target="jup_b202_spot",	                                hint="st_jup_b202_name_land"},
    {target="jup_b211_spot",	                                hint="st_jup_b211_name_land"},
    {target="jup_b200_spot",	                                hint="st_jup_b200_name_land"},
    {target="jup_b19_spot",  	                                hint="st_jup_b19_name_land"},
    {target="jup_a6_spot",  	                                hint="st_jup_a6_name_land"},
    {target="jup_b25_spot",  	                                hint="st_jup_b25_name_land"},
    {target="jup_b25_spot",		                            hint="st_jup_earth_name_land"},
    {target="jup_b6_spot",  	                                hint="st_jup_b6_name_land"},
    {target="jup_b205_spot",	                                hint="st_jup_b205_name_land"},
    {target="jup_b206_spot",	                                hint="st_jup_b206_name_land"},
    {target="jup_b206_spot",	                                hint="st_jup_grove_name_land"},
    {target="jup_b32_spot",  	                                hint="st_jup_b32_name_land"},
    {target="jup_a10_spot",  	                                hint="st_jup_a10_name_land"},
    {target="jup_b209_spot",	                                hint="st_jup_b209_name_land"},
    {target="jup_b208_spot",	                                hint="st_jup_b208_name_land"},
    {target="jup_a12_spot", 	                                hint="st_jup_a12_name_land"},
    {target="jup_b212_spot",	                                hint="st_jup_b212_name_land"},
    {target="jup_b9_spot",  	                                hint="st_jup_b9_name_land"},
    {target="jup_b201_spot",	                                hint="st_jup_b201_name_land"},
    {target="jup_a9_spot",  	                                hint="st_jup_a9_name_land"},

    {target="pri_a28_spot",			                        hint="st_pri_a28_name_land"},
    {target="pri_b36_spot",			                        hint="st_pri_b36_name_land"},
    {target="pri_b303_spot",		                            hint="st_pri_b303_name_land"},
    {target="pri_b301_spot",		                            hint="st_pri_b301_name_land"},
    {target="pri_a17_spot",			                        hint="st_pri_a17_name_land"},
    {target="pri_b306_spot",		                            hint="st_pri_b306_name_land"},
    {target="pri_b306_spot",		                            hint="st_pri_plug_name_land"},
    {target="pri_a16_spot",			                        hint="st_pri_a16_name_land"},
    {target="pri_a25_spot",			                        hint="st_pri_a25_name_land"},
    {target="pri_b35_spot",			                        hint="st_pri_b35_name_land"},
    {target="pri_a21_spot",			                        hint="st_pri_a21_name_land"},
    {target="pri_b304_spot",		                            hint="st_pri_b304_name_land"},
    {target="pri_b304_spot",		                            hint="st_pri_bath_name_land"},
    {target="pri_a18_spot",			                        hint="st_pri_a18_name_land"},
    {target="pri_anomal_vulkan_spot",	                        hint="st_pri_b307_name_land"},
    {target="pri_anomal_loza_spot",		                    hint="st_pri_b302_name_land"}
}