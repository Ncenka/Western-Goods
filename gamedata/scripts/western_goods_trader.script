--[[
-- Info
-- 
-- Original Author(s) : NLTP_ASHES
-- Edited : N/A
-- Date : 26/12/2022
-- License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)
-- 
-- Script used to spawn the western goods trader and to manage specific aspects of him.
-- The code used to spawned the trader was edited but originally written by lauta_ro.
--]]

--[[----------------------------------------------------------------------------------------------------
	Constants and imported functions
------------------------------------------------------------------------------------------------------]]

local CONST_TRADER_SECTION = "stalker_western_goods_trader"
local CONST_TRADER_SQUAD = "stalker_western_goods_trader_squad"

local dbg_printf = western_goods_utils.dbg_printf
local table_contains = western_goods_utils.table_contains
local get_translation = game.translate_string
local find_object_by_id = western_goods_utils.find_object_by_id
local heli_spawn = western_goods_helicopter.heli_spawn
local heli_register = western_goods_helicopter.heli_register

--[[----------------------------------------------------------------------------------------------------
	Spawning the trader
------------------------------------------------------------------------------------------------------]]

-- Function used to spawn the trader on the map.
function spawn_western_goods_trader()
	UnregisterScriptCallback("actor_on_update", spawn_western_goods_trader)

	-- Make sure the trader isn't already spawned in
	for id,_ in pairs(SIMBOARD.squads) do
		if tostring(alife_object(id):section_name()) == CONST_TRADER_SQUAD then
			dbg_printf("[WG] Squad already exists ! | %s", tostring(alife_object(id):section_name()))
			return 
		end
	end

	local setting_ini = ini_file("misc\\simulation.ltx")

	-- Make sure the npc section is defined in misc\simulation.ltx and spawn him on the appropriate smart terrain
	local result, squad_section, count, li, lc
	setting_ini:section_for_each(function(section)
		local smart = SIMBOARD.smarts_by_names[section]
		if (smart) then
			lc = setting_ini:line_count(section)
			for li = 0, lc - 1 do
				result, squad_section, count = setting_ini:r_line(section,li,"","")
				if tostring(squad_section) == CONST_TRADER_SQUAD then
					dbg_printf("[WG] Spawning %s at %s", tostring(squad_section), smart:name())
					SIMBOARD:create_squad(smart, squad_section)
				end
			end
		end
	end)
end


--[[----------------------------------------------------------------------------------------------------
	Trading actions/restrictions
------------------------------------------------------------------------------------------------------]]

-- Function used to allow/disallow the player from moving items from one container to another when trading with the western goods trader.
function check_move_item(flags, npc_id, obj, mode, bag)
	if mode ~= "trade" then return flags.ret_value end

	local npc = npc_id and find_object_by_id(npc_id)
	local is_western_goods_trader = npc:section() == CONST_TRADER_SECTION

	-- If you are talking to the western goods trader and the item is not tradable, prevent the item from moving
	flags.ret_value = flags.ret_value and not is_western_goods_trader or is_tradable(npc, obj)
end

-- Function used to color the untradable items in the player inventory.
local bags_to_tint = { actor_equ = true, actor_bag = true, actor_trade = true, actor_trade_bag = true }
function tint_functor(cell)
	local ui_instance = ui_inventory.GUI
		
	if (not ui_instance)
	or (ui_instance.mode ~= "trade")
	or (not bags_to_tint[cell.container.ID])
	or (table_contains(tradable_items, cell.section))
	then return end
	
	local partner = ui_instance:GetPartner()
	
	if partner and partner:section() ~= CONST_TRADER_SECTION then return end
	
	-- If you're in the trade mode with the western goods trader, and the item isn't tradable, tint it in red
	return GetARGB(240, 250, 0, 0)
end

-- Monkey-patching ui_inventory.UIInventory.TMode_Sell to change the trade logic to a sort of barter system with the trader.
TMode_SellBase = ui_inventory.UIInventory.TMode_Sell
function ui_inventory.UIInventory.TMode_Sell(self)
	-- If we aren't talking to the western goods trader, process normally
	local npc = self:GetPartner()
	if not npc or npc:section() ~= CONST_TRADER_SECTION then
		TMode_SellBase(self)
		return
	end

	make_exchange(self, npc)
end

-- Monkey-patching ui_inventory.UIInventory.TMode_Buy to change the trade logic to a sort of barter system with the trader.
TMode_BuyBase = ui_inventory.UIInventory.TMode_Buy
function ui_inventory.UIInventory.TMode_Buy(self)
	-- If we aren't talking to the western goods trader, process normally
	local npc = self:GetPartner()
	if not npc or npc:section() ~= CONST_TRADER_SECTION then
		TMode_BuyBase(self)
		return
	end

	make_exchange(self, npc)
end

-- Function called when the player clicks Sell/Buy in the trade UI. This function makes a few checks, and then proceeds to exchange the money for the items selected.
function make_exchange(self, npc)
	-- Get sell cells
	local cc_sell = self.CC["actor_trade"]
	if (not cc_sell) then
		return
	end
	if size_table(cc_sell.indx_id) <= 0 then
		self.message_box:InitMessageBox("message_box_ok")
		self.message_box:SetText( get_translation("western_goods_trader_empty_sell") )
		self.message_box:ShowDialog(true)
		return
	end

	-- Get buy sells
	local cc_buy = self.CC["npc_trade"]
	if (not cc_buy) then
		return
	end
	if size_table(cc_buy.indx_id) <= 0 then
		self.message_box:InitMessageBox("message_box_ok")
		self.message_box:SetText( get_translation("western_goods_trader_empty_buy") )
		self.message_box:ShowDialog(true)
		return
	end

	-- Calculate full sell price
	local tot_sell_cost = 0
	for _,ci in pairs(cc_sell.cell) do
		tot_sell_cost = tot_sell_cost + cc_sell:GetCellCost(ci)
	end
	tot_sell_cost = math.floor(tot_sell_cost)

	-- Calculate full buy price
	local tot_buy_cost = 0
	for _,ci in pairs(cc_buy.cell) do
		tot_buy_cost = tot_buy_cost + cc_buy:GetCellCost(ci)
	end
	tot_buy_cost = math.floor(tot_buy_cost)

	-- Don't processed the sell price < buy price
	if tot_sell_cost < tot_buy_cost then
		self.message_box:InitMessageBox("message_box_ok")
		self.message_box:SetText( get_translation("western_goods_trader_uneven_value") )
		self.message_box:ShowDialog(true)
		return
	end

	-- Transfer items
	for id,_ in pairs(cc_sell.indx_id) do
		if cc_sell:GetCell_ID(id) then
			alife_release(alife_object(id))
		end
	end
	for id,_ in pairs(cc_buy.indx_id) do
		if cc_buy:GetCell_ID(id) then
			self:On_Item_Exchange(npc, db.actor, find_object_by_id(id))
		end
	end

	-- Update UI
	self.update_info = true
end


--[[----------------------------------------------------------------------------------------------------
	Barter actions/restrictions
------------------------------------------------------------------------------------------------------]]

-- Function used to initiate the Barter UI.
function npc_barter()
	utils_obj.play_sound("interface\\inv_open")
	barter_ui.start()
end

-- Monkey-patching barter_ui.GUI_on_show to prevent the Barter button from showing if the NPC is the western goods trader.
GUI_on_showBase = barter_ui.GUI_on_show
function barter_ui.GUI_on_show(name, path)
	local ui_instance = ui_inventory.GUI
	if name ~= "UIInventory" or (not ui_instance) then return end

	local partner = ui_instance:GetPartner()

	if partner and partner:section() == CONST_TRADER_SECTION then return end

	GUI_on_showBase(name, path)
end


--[[----------------------------------------------------------------------------------------------------
	Helicopter transport order
------------------------------------------------------------------------------------------------------]]

function go_to_level(level_name)

	give_info("spawn_guide_helicopter")

	local dest_info = western_goods_trade_guide_table[level_name]
	local spawn_pos = vector():set(dest_info.sx, dest_info.sy, dest_info.sz)
	local look_pos = vector():set(dest_info.lx, dest_info.ly, 0)
	ChangeLevel(spawn_pos, dest_info.lvid, dest_info.gvid, look_pos, true)
end

function spawn_guide_helicopter()
	if has_alife_info("spawn_guide_helicopter") then

		disable_info("spawn_guide_helicopter")

		local sec = "western_goods_helicopter"
		local pos = db.actor:position()
		pos.y = pos.y + 20
		local lvid = db.actor:level_vertex_id()
		local gvid = db.actor:game_vertex_id()
		local helicopter_se = heli_spawn(sec,pos,lvid,gvid)

		CreateTimeEvent("delay_order_heli",helicopter_se.id,0,function()
			if find_object_by_id(helicopter_se.id) then
				heli_register(helicopter_se.id,"leave_at_point",level.get_bounding_volume().max)
				return true
			end
		end)
	end
end


--[[----------------------------------------------------------------------------------------------------
	Callbacks registration
------------------------------------------------------------------------------------------------------]]

-- Function used to register callbacks.
function on_game_start()
	RegisterScriptCallback("actor_on_first_update", spawn_western_goods_trader)
	RegisterScriptCallback("actor_on_first_update", retrieve_tradable_items)
	RegisterScriptCallback("actor_on_first_update", spawn_guide_helicopter)
	RegisterScriptCallback("ActorMenu_on_item_before_move", check_move_item)
	rax_icon_tint.register("wg_tint_functor", tint_functor)
end


--[[----------------------------------------------------------------------------------------------------
	Utility functions
------------------------------------------------------------------------------------------------------]]

-- Function used to retrieve the list of tradable items (items of type "money") with the western goods trader.
local tradable_items = {}
function retrieve_tradable_items()
	-- Clear the cached list of tradable items
	tradable_items = {}

	-- Get the table of all items of the addon from western_goods_core
	local money_table = western_goods_core.table_items_by_type(western_goods_core.western_goods_items, "money")

	-- Go through the list of items in the addon, and keep only the items of type "money"
	for key,_ in pairs(money_table) do
		dbg_printf("[WG] Item %s marked as tradable with western goods trader", western_goods_core.table_item_field_by_key(money_table, key, "section"))
		table.insert(tradable_items, western_goods_core.table_item_field_by_key(money_table, key, "section"))
	end

	dbg_printf("[WG] Assembled trade table :\n%s", utils_data.print_table(tradable_items, false, true))
end

-- Function used to know if an object is tradable with the western goods trader.
function is_tradable(npc, obj)
	local is_in_npc_inv = utils_item.in_npc_inv(npc, obj)
	local is_in_actor_inv = utils_item.in_actor_inv(obj)
	local is_tradable_item = table_contains(tradable_items, obj:section())

	-- An item isn't tradable if it is in the player's and isn't present in the tradable_items table
	return is_in_npc_inv or (is_tradable_item and is_in_actor_inv)
end

--[[----------------------------------------------------------------------------------------------------
	Guide table
------------------------------------------------------------------------------------------------------]]

western_goods_trade_guide_table = {
	limansk      = {sx=-72.8004, sy=-6.9772, sz=57.4624, lx=0.0, ly=-1.5, lvid=67, gvid=2455},
}

function dialogs_mlr.wg_trader_guide_to_limansk(actor,npc,p)
	go_to_level("limansk")
end