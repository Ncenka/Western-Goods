--- Original Author(s) : NLTP_ASHES
--- Edited : N/A
--- Date : 03/03/2023
--- License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)
---
--- Script used to manage the dialogs of the Western Goods addon.

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- Dialog constants
local CONST_DISPLAY_TIME = 15
local CONST_DELAY_MSG = 7000
local CONST_DELAY_QUICK_MSG = 1000
local CONST_DEFAULT_NAME = game.translate_string("st_western_goods_dialog_manager_default_name")
local CONST_DEFAULT_ICON = "ui_inGame2_no_data"

-- Dialog variables
DIALOGS_TABLE = {}
local sound = true
local last_sender = nil

-- Imported functions
local dbg_printf = western_goods_utils.dbg_printf


-- ---------------------------------------------------------------------------------------------------------------------
-- Dialog Manager
-- ---------------------------------------------------------------------------------------------------------------------

--- Function called every frame to update the Dialog Manager and check if some messages should be fired.
--- When dialogs are waiting to be played, the Dialog Manager will disable dynamic random news.
--- @return nil
function update_dialogs()
	-- Turn off dynamic news
	if size_table(DIALOGS_TABLE) > 0 and dynamic_news_manager.enable_news then
		dynamic_news_manager.enable_news = false
		dbg_printf("[WG] Dialogs Manager | Disabled dynamic news (now:%s)", dynamic_news_manager.enable_news)
	end

	-- Process dialogs
	for index,dialog in pairs(DIALOGS_TABLE) do
		if dialog.timer < time_global() then
			-- Send the line of dialog
			dynamic_news_helper.send_tip(dialog.message, dialog.sender, nil, CONST_DISPLAY_TIME, dialog.icon, dialog.sound, "npc")
			DIALOGS_TABLE[index] = nil
			dbg_printf("[WG] Dialogs Manager | Pushed dialog (from:%s) (left:%s)", dialog.sender, size_table(DIALOGS_TABLE))
		end
	end

	-- Re-enable dynamic news if we're done sending dialogs
	if size_table(DIALOGS_TABLE) < 1 and not dynamic_news_manager.enable_news then
		dynamic_news_manager.enable_news = true
		dbg_printf("[WG] Dialogs Manager | Re-enabled dynamic news (now:%s)", dynamic_news_manager.enable_news)
	end
end

--- Function used to register multiple dialog lines to the Dialog Manager.
--- For each line of dialog, default values exist 'sender' and 'icon'; 'message' is required.
--- @param dialog_table table
--- @param quick_delay boolean
--- @return nil
function send_dialog(dialog_table, quick_delay)
	dbg_printf("[WG] Dialogs Manager | Preparing dialog (length:%s)", size_table(dialog_table))

	for index,dialog in pairs(dialog_table) do
		-- Default values
		dialog.sender = dialog.sender or CONST_DEFAULT_NAME
		dialog.icon = dialog.icon or CONST_DEFAULT_ICON
		dialog.timer = (quick_delay and CONST_DELAY_QUICK_MSG or CONST_DELAY_MSG) * (size_table(DIALOGS_TABLE) + 1) + time_global()
		dialog.sound = sound and "beep_1" or "beep_2"

		-- Invert sound effect if from different sender
		if not last_sender or (last_sender ~= dialog.sender) then
			sound = not sound
			last_sender = dialog.sender
		end

		this.send_message(dialog.message, dialog.sender, dialog.icon, dialog.timer, dialog.sound)
	end

	dbg_printf("[WG] Dialogs Manager | Dialog ready (waiting queue: %s(+%s))", size_table(DIALOGS_TABLE), size_table(dialog_table))
end

--- Function used to register a single dialog line to the Dialog Manager.
--- Default values exist 'sender', 'icon', 'timer' and 'sound'; 'message' is required.
--- @param message string
--- @param sender string
--- @param icon string
--- @param timer number
--- @param sound string
--- @return nil
function send_message(message, sender, icon, timer, sound)
	-- Default values
	sender = sender or CONST_DEFAULT_NAME
	icon = icon or CONST_DEFAULT_ICON
	timer = timer or (CONST_DELAY_QUICK_MSG + time_global())
	sound = sound or "beep_1"

	table.insert(DIALOGS_TABLE, { message=message, sender=sender, icon=icon, timer=timer, sound=sound })

	dbg_printf("[WG] Dialogs Manager | Registered dialog (from:%s)", sender)
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Start Dialogs
-- ---------------------------------------------------------------------------------------------------------------------

--- Function called to determine the start dialog's text of the crew member.
--- @return string
function crew_member_start_dialog()
	if not (has_alife_info("western_goods_act_1_task_3_active") or has_alife_info("western_goods_act_1_task_3_finished")) then
		return game.translate_string("stalker_crew_member_start_0")

	elseif not has_alife_info("stalker_crew_member_rescue_over") then
		return game.translate_string("stalker_crew_member_start_1")

	elseif not has_alife_info("wg_act_1_task_3_stage_1_dialog_1_sent") then
		return game.translate_string("stalker_crew_member_start_2")

	elseif not has_alife_info("wg_act_1_task_3_stage_1_dialog_2_sent") then
		return game.translate_string("stalker_crew_member_start_3")

	elseif not has_alife_info("wg_act_1_task_3_crew_member_extracted") then
		return game.translate_string("stalker_crew_member_start_4")

	elseif not has_alife_info("western_goods_act_1_task_3_finished") then
		return game.translate_string("stalker_crew_member_start_5")

	else return game.translate_string("stalker_crew_member_start_6")
	end
end

--- Function called to determine the start dialog's text of yellow crewmate.
--- @return string
function yellow_ecolog_start_dialog()
	if has_alife_info("western_goods_act_2_task_2_controller_spawned") and not has_alife_info("western_goods_act_2_task_2_controller_killed") then
		return game.translate_string("western_goods_yellow_ecolog_start_0")
	else
		return game.translate_string("western_goods_yellow_ecolog_start_1")
	end
end

--- Function called to determine the start dialog's text of Dunn Lynn.
--- @return string
function dunn_lynn_start_dialog()
	if has_alife_info("western_goods_act_2_task_2_active") and not has_alife_info("western_goods_act_2_task_2_finished") then
		return game.translate_string("western_goods_dunn_lynn_first_start")
	elseif math.random() < 0.0001 then
		return game.translate_string("western_goods_dunn_lynn_start_x")
	else
		return game.translate_string("western_goods_dunn_lynn_start_" .. math.random(0,5))
	end
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Callbacks registration
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to register callbacks.
--- @return nil
function on_game_start()
	RegisterScriptCallback("save_state", save_state)
	RegisterScriptCallback("load_state", load_state)
	RegisterScriptCallback("actor_on_update", update_dialogs)
end


-- ---------------------------------------------------------------------------------------------------------------------
-- Data persistence
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to store information in the save file.
--- @param m_data table
--- @return nil
function save_state(m_data)
	-- Prepare save table
	local DIALOGS_SAVE = {}

	-- Make copies of dialog table
	copy_table(DIALOGS_SAVE, DIALOGS_TABLE)

	-- Pre-process timers
	for _,dialog in pairs(DIALOGS_SAVE) do
		dialog.timer = dialog.timer - time_global()
	end

	-- Save dialog table
	m_data.wg_dialogs_table = DIALOGS_SAVE

	-- Debug print
	dbg_printf("[WG] Dialogs Manager | Saved dialog table...\n%s",utils_data.print_table(DIALOGS_SAVE, false, true))
end

--- Function used to load information stored in the save file.
--- @param m_data table
--- @return nil
function load_state(m_data)
	local DIALOGS_SAVE = m_data.wg_dialogs_table or {}

	-- Post-process timers
	for _,dialog in pairs(DIALOGS_SAVE) do
		dialog.timer = dialog.timer + time_global()
	end

	copy_table(DIALOGS_TABLE, DIALOGS_SAVE)

	-- Debug print
	dbg_printf("[WG] Dialogs Manager | Loaded dialog table...\n%s",utils_data.print_table(DIALOGS_TABLE, false, true))
end
