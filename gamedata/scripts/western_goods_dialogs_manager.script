--- Original Author(s) : NLTP_ASHES
--- Edited : N/A
--- Date : 03/03/2023
--- License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)
---
--- Script used to manage the dialogs of the Western Goods addon.

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- Dialog constants and variables
local CONST_DIALOG_DISPLAY_TIME = 15
local CONST_DIALOG_DELAY_MSG = 7
local dialog_waiting_count = 0

-- Imported functions
local dbg_printf = western_goods_utils.dbg_printf
local CreatePersistentTimeEvent = western_goods_persistent_timed_events.CreatePersistentTimeEvent


-- ---------------------------------------------------------------------------------------------------------------------
-- Dynamic News Dialog Manager
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to display a dialog on screen.
--- Warning :IDs in the table have to be contiguous integers from 1 to n !
--- @param dialog_table table
--- @return nil
function send_dialog(dialog_table, no_delay)
	for index=1, #dialog_table do
		if no_delay then
			dynamic_news_helper.send_tip(dialog_table[index].message, dialog_table[index].sender, nil, CONST_DIALOG_DISPLAY_TIME, dialog_table[index].icon, nil, "npc")
		else
			dialog_waiting_count = dialog_waiting_count + 1

			-- Turn off dynamic news
			dynamic_news_manager.enable_news = false

			CreatePersistentTimeEvent("western_goods_delay_message", dialog_waiting_count, CONST_DIALOG_DELAY_MSG*index, function ()

				-- Send the line of dialog
				dynamic_news_helper.send_tip(dialog_table[index].message, dialog_table[index].sender, nil, CONST_DIALOG_DISPLAY_TIME, dialog_table[index].icon, nil, "npc")

				-- Re-enable dynamic news if we're done sending dialogs
				if dialog_waiting_count <= 0 then
					dynamic_news_manager.enable_news = true
				end

				dialog_waiting_count = dialog_waiting_count - 1

				return true
			end)
		end
	end
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Start Dialogs
-- ---------------------------------------------------------------------------------------------------------------------

--- Function called to determine the start dialog's text of the crew member.
--- @return string
function crew_member_start_dialog()
	if not has_alife_info("wg_act_1_task_3_stage_0_crew_member_spawned") then
		return game.translate_string("stalker_crew_member_start_0")

	elseif not has_alife_info("stalker_crew_member_rescue_over") then
		return game.translate_string("stalker_crew_member_start_1")

	elseif not has_alife_info("wg_act_1_task_3_stage_1_dialog_1_sent") then
		return game.translate_string("stalker_crew_member_start_2")

	elseif not has_alife_info("wg_act_1_task_3_stage_1_dialog_2_sent") then
		return game.translate_string("stalker_crew_member_start_3")

	elseif not has_alife_info("wg_act_1_task_3_crew_member_extracted") then
		return game.translate_string("stalker_crew_member_start_4")

	elseif not has_alife_info("western_goods_act_1_task_3_finished") then
		return game.translate_string("stalker_crew_member_start_5")

	else return game.translate_string("stalker_crew_member_start_6")
	end
end

--- Function called to determine the start dialog's text of Dunn Lynn.
--- @return string
function dunn_lynn_start_dialog()
	return game.translate_string("stalker_dunn_lynn_start_" .. math.random(0,5))
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Callbacks registration
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to register callbacks.
--- @return nil
function on_game_start()
	RegisterScriptCallback("save_state", save_state)
	RegisterScriptCallback("load_state", load_state)
end


-- ---------------------------------------------------------------------------------------------------------------------
-- Data persistence
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to store information in the save file.
--- @param m_data table
--- @return nil
function save_state(m_data)
	m_data.dialog_waiting_count = dialog_waiting_count or 0
	dbg_printf("[WG] Saved dialog queue length : %s", dialog_waiting_count)
end

--- Function used to load information stored in the save file.
--- @param m_data table
--- @return nil
function load_state(m_data)
	dialog_waiting_count = m_data.dialog_waiting_count or 0
	dbg_printf("[WG] Loaded dialog queue length : %s", dialog_waiting_count)
end
