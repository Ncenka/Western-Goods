--- Original Author(s) : NLTP_ASHES
--- Edited : N/A
--- Date : 03/03/2023
--- License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)
---
--- Script used to manage the dialogs of the Western Goods addon.

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- Dialog constants
local CONST_DISPLAY_TIME = 15
local CONST_DELAY_MSG = 7
local CONST_DELAY_QUICK_MSG = 1
local CONST_DEFAULT_NAME = game.translate_string("st_western_goods_dialog_manager_default_name")
local CONST_DEFAULT_ICON = "ui_inGame2_no_data"

-- Dialog variables
local dialog_waiting_count = 0
local sound = false
local last_sender = nil

-- Imported functions
local dbg_printf = western_goods_utils.dbg_printf
local CreatePersistentTimeEvent = western_goods_persistent_timed_events.CreatePersistentTimeEvent


-- ---------------------------------------------------------------------------------------------------------------------
-- Dynamic News Dialog Manager
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to display a dialog on screen. Default values exist for each line's 'sender' and 'icon'. 'message' is required.
--- @param dialog_table table
--- @return nil
function send_dialog(dialog_table, quick_delay)
	dbg_printf("[WG] Dialogs Manager | Preparing dialog (length:%s)", size_table(dialog_table))
	for _,dialog in pairs(dialog_table) do
		-- Default values
		dialog.sender = dialog.sender or CONST_DEFAULT_NAME
		dialog.icon = dialog.icon or CONST_DEFAULT_ICON

		-- Turn off dynamic news
		dynamic_news_manager.enable_news = false

		dialog_waiting_count = dialog_waiting_count + 1

		CreatePersistentTimeEvent("western_goods_delay_message", dialog_waiting_count, (quick_delay and CONST_DELAY_QUICK_MSG or CONST_DELAY_MSG)*dialog_waiting_count, function ()

			dbg_printf("[WG] Dialogs Manager | Pushing dialog (from:%s) (pos in queue:%s)", dialog.sender,dialog_waiting_count)

			-- Invert sound effect if from different sender
			if not last_sender or (last_sender ~= dialog.sender) then
				sound = not sound
				last_sender = dialog.sender
			end

			-- Send the line of dialog
			dynamic_news_helper.send_tip(dialog.message, dialog.sender, nil, CONST_DISPLAY_TIME, dialog.icon, sound and "beep_1" or "beep_2", "npc")

			dialog_waiting_count = dialog_waiting_count - 1

			-- Re-enable dynamic news if we're done sending dialogs
			if dialog_waiting_count <= 0 then
				dynamic_news_manager.enable_news = true
			end

			return true
		end)
	end
	dbg_printf("[WG] Dialogs Manager | Dialog ready (waiting queue: %s)", dialog_waiting_count)
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Start Dialogs
-- ---------------------------------------------------------------------------------------------------------------------

--- Function called to determine the start dialog's text of the crew member.
--- @return string
function crew_member_start_dialog()
	if not (has_alife_info("western_goods_act_1_task_3_active") or has_alife_info("western_goods_act_1_task_3_finished")) then
		return game.translate_string("stalker_crew_member_start_0")

	elseif not has_alife_info("stalker_crew_member_rescue_over") then
		return game.translate_string("stalker_crew_member_start_1")

	elseif not has_alife_info("wg_act_1_task_3_stage_1_dialog_1_sent") then
		return game.translate_string("stalker_crew_member_start_2")

	elseif not has_alife_info("wg_act_1_task_3_stage_1_dialog_2_sent") then
		return game.translate_string("stalker_crew_member_start_3")

	elseif not has_alife_info("wg_act_1_task_3_crew_member_extracted") then
		return game.translate_string("stalker_crew_member_start_4")

	elseif not has_alife_info("western_goods_act_1_task_3_finished") then
		return game.translate_string("stalker_crew_member_start_5")

	else return game.translate_string("stalker_crew_member_start_6")
	end
end

--- Function called to determine the start dialog's text of yellow crewmate.
--- @return string
function yellow_ecolog_start_dialog()
	if has_alife_info("western_goods_act_2_task_2_controller_spawned") and not has_alife_info("western_goods_act_2_task_2_controller_killed") then
		return game.translate_string("western_goods_yellow_ecolog_start_0")
	else
		return game.translate_string("western_goods_yellow_ecolog_start_1")
	end
end

--- Function called to determine the start dialog's text of Dunn Lynn.
--- @return string
function dunn_lynn_start_dialog()
	if has_alife_info("western_goods_act_2_task_2_active") and not has_alife_info("western_goods_act_2_task_2_finished") then
		return game.translate_string("western_goods_dunn_lynn_first_start")
	elseif math.random() < 0.0001 then
		return game.translate_string("western_goods_dunn_lynn_start_x")
	else
		return game.translate_string("western_goods_dunn_lynn_start_" .. math.random(0,5))
	end
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Callbacks registration
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to register callbacks.
--- @return nil
function on_game_start()
	RegisterScriptCallback("save_state", save_state)
	RegisterScriptCallback("load_state", load_state)
end


-- ---------------------------------------------------------------------------------------------------------------------
-- Data persistence
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to store information in the save file.
--- @param m_data table
--- @return nil
function save_state(m_data)
	m_data.dialog_waiting_count = dialog_waiting_count
	dbg_printf("[WG] Dialogs Manager | Saved dialog queue length : %s", m_data.dialog_waiting_count)
end

--- Function used to load information stored in the save file.
--- @param m_data table
--- @return nil
function load_state(m_data)
	dialog_waiting_count = m_data.dialog_waiting_count or 0
	dbg_printf("[WG] Dialogs Manager | Loaded dialog queue length : %s", dialog_waiting_count)
end
