--- Original Author(s) : <unknown>
--- Edited : NLTP_ASHES
--- Date : 19/06/2023
--- License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)
---
--- Based off ui_dosimeter.script by <unknown>, script used to handle the UI for the Rangefinder.

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- Constants
local CONST_UPDATE_FREQ      = 1000 -- in milliseconds

-- Imported functions
local dbg_printf             = western_goods_utils.dbg_printf

-- Variables
GUI					         = nil -- instance, don't touch

-- ---------------------------------------------------------------------------------------------------------------------
-- General Functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to get the UI singleton for the UIRangefinder class.
--- @return UIRangefinder
function get_ui()
    if (not GUI) then
        GUI = UIRangefinder()
    end

    return GUI
end

-- ---------------------------------------------------------------------------------------------------------------------
-- UI Class
-- ---------------------------------------------------------------------------------------------------------------------

class "UIRangefinder" (CUIScriptWnd)

function UIRangefinder:__init() super()
    self:Show(true)
    self:Enable(true)

    local xml = CScriptXmlInit()
    self.xml = xml
    xml:ParseFile("ui_western_goods_rangefinder.xml")
    xml:InitWindow("rangefinder", 0, self)

    -- Build variables
    self.update_timer = 0

    -- Build UI
    self.m_los1 = xml:InitStatic("rangefinder:los1", self)
    self.m_los2 = xml:InitStatic("rangefinder:los2", self)
    self.m_los3 = xml:InitStatic("rangefinder:los3", self)

    self.m_hcd1 = xml:InitStatic("rangefinder:hcd1", self)
    self.m_hcd2 = xml:InitStatic("rangefinder:hcd2", self)
    self.m_hcd3 = xml:InitStatic("rangefinder:hcd3", self)

    self.m_reticule = xml:InitStatic("rangefinder:reticule", self)
end

function UIRangefinder:__finalize()
    GUI = nil
end

function UIRangefinder:Update()

    CUIScriptWnd.Update(self)

    local tg = time_global()

    if (tg < self.update_timer) then
        return
    else
        self.update_timer = tg + CONST_UPDATE_FREQ
    end

    -- Line Of Sight Distance
    local los1, los2, los3 = self:GetLOSTextures()

    -- Horizontal Compensation Distance Distance
    local hcd1, hcd2, hcd3 = self:GetHCDTextures()

    self.m_los1:InitTextureEx(los1, "hud\\p3d")
    self.m_los2:InitTextureEx(los2, "hud\\p3d")
    self.m_los3:InitTextureEx(los3, "hud\\p3d")

    self.m_hcd1:InitTextureEx(hcd1, "hud\\p3d")
    self.m_hcd2:InitTextureEx(hcd2, "hud\\p3d")
    self.m_hcd3:InitTextureEx(hcd3, "hud\\p3d")

    self.m_reticule:InitTextureEx("rf_reticule", "hud\\p3d")
end

function UIRangefinder:GetLOSTextures()
    local los = math.floor(level.get_target_dist())

    -- Get LOS number as a 3 char string (5 -> "005")
    local s_los = western_goods_utils.as_string(los, 3)

    -- Line Of Sight format
    if los < 999 then
        local los1 = strformat("rf_num_b_%s", s_los:sub(1, 1))
        local los2 = strformat("rf_num_b_%s", s_los:sub(2, 2))
        local los3 = strformat("rf_num_b_%s", s_los:sub(3, 3))
        return los1, los2, los3
    end

    return "rf_b_dash", "rf_b_dash", "rf_b_dash"
end

function UIRangefinder:GetHCDTextures()
    local pos = vector():mad(device().cam_pos, device().cam_dir, level.get_target_dist())
    pos.y = db.actor:position().y

    local hcd = math.floor(western_goods_utils.get_distance(db.actor:position(), pos))

    -- Get HCD number as a 3 char string (5 -> "005")
    local s_hcd = western_goods_utils.as_string(hcd, 3)

    -- Horizontal Compensation Distance format
    if hcd < 999 then
        local hcd1 = strformat("rf_num_r_%s", s_hcd:sub(1, 1))
        local hcd2 = strformat("rf_num_r_%s", s_hcd:sub(2, 2))
        local hcd3 = strformat("rf_num_r_%s", s_hcd:sub(3, 3))
        return hcd1, hcd2, hcd3
    end

    return "rf_r_dash", "rf_r_dash", "rf_r_dash"
end