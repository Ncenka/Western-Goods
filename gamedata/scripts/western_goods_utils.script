--[[
-- Info
-- 
-- Original Author(s) : NLTP_ASHES
-- Edited : N/A
-- Date : 03/03/2023
-- License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)
-- 
-- Script used to define various common functions defined in the scripts of the Western Goods addon.
--]]

--[[----------------------------------------------------------------------------------------------------
	Constants and imported functions
------------------------------------------------------------------------------------------------------]]

local CreatePersistentTimeEvent


--[[----------------------------------------------------------------------------------------------------
	Utils Functions
------------------------------------------------------------------------------------------------------]]

-- Function used to print information into the console/log file only when Western Goods' debug mode is enabled
function dbg_printf(...)
    if not western_goods_mcm.get_config("debug_mode") then return end
    printf(...)
end

-- Function used to know if a certain value is contained in a table. This function is generic enough so that it'd work on any table.
function table_contains(tab, val)
	if not tab then return end
	for key,value in pairs(tab) do
		if val == value then
			return true
		end
	end
	return false
end

-- Function used to get a random id (as an int) from a given table. Returns a random number between 1 and the size of the table.
function table_random_id(tab)
	if not tab then return end
	return math.random(1,#tab)
end

-- Function used to clear the code a bit.
function round_number(num)
	return tostring(math.floor(num+0.5))
end

-- Function used to know if there exists a translation for a given game string.
function has_translation(str)
	return game.translate_string(str) ~= str
end

-- Function used to get the distance between two points in 2D space.
function get_distance(position_1, position_2)
	if not (position_1 and position_2) then return nil end
	
    local x = math.abs(position_1.x - position_2.x)
    local z = math.abs(position_1.z - position_2.z)
    local distance = math.sqrt((x * x) + (z * z))
	
    return distance
end

-- Function used to get game object by its ID if it exists on the current level.
function find_object_by_id(id)
	return db.storage[id] and db.storage[id].object or level.object_by_id(id)
end

-- Function used to get a given variable as a number. Returns nil if the variable cannot be casted.
function as_number(var)
	if type(var) == "string" then
		return tonumber(var)
	end

	if type(var) == "number" then
		return var
	end

	printe("!ERROR : cannot cast variable to number")

	return nil
end

-- Function used to get a given variable as a string. Returns nil if the variable cannot be casted.
function as_string(var)
	if type(var) == "number" then
		return tostring(var)
	end

	if type(var) == "boolean" then
		return tostring(var)
	end

	if type(var) == "string" then
		return var
	end

	printe("!ERROR : cannot cast variable to string")

	return nil
end

-- Function used to get a given variable as a boolean. Returns nil if the variable cannot be casted.
function as_boolean(var)
	if type(var) == "string" then
		if var == "true" then
			return true
		elseif var == "false" then
			return false
		end
	end

	if type(var) == "boolean" then
		return var
	end

	printe("!ERROR : cannot cast variable to boolean")

	return nil
end

-- Function used to retrieve the server object of a unique NPC by its section name
-- Warning : if multiple NPCs with that section exist, it'll only return the first one it finds
function find_unique_npc(sec)
	for id = 1, 65534 do

		local se = alife_object(id)

		if se and se:section_name() == sec then return se end
	end
end

-- Function used to spawn a story squad
function spawn_story_squad(sec, pos, smart)
	if not sec or not smart then return end

	-- Make sure the squad isn't already spawned in
	for id,_ in pairs(SIMBOARD.squads) do
		if alife_object(id):section_name() == sec then
			se_squad = alife_object(id)
			dbg_printf("[WG] Squad already exists | %s", se_squad:section_name())
			return se_squad
		end
	end

	-- Spawn squad on the appropriate smart terrain
	local se_squad = spawn_squad(sec,pos,smart.m_level_vertex_id,smart.m_game_vertex_id)
	if not se_squad then return end

	-- Force the squad to stay there
	se_squad.scripted_target = smart:name()

	dbg_printf("[WG] Story squad %s successfully created with id %s at %s", sec, se_squad.id, smart:name())

	return se_squad
end

-- Function used to spawn a simulation squad, at a given point in space
function spawn_squad(sec,pos,lvid,gvid)
	local squad = alife_create(sec, pos, lvid, gvid)
	if not squad then return end

	squad:create_npc(nil, pos, lvid, gvid)

	if squad.commander_id then
		for k in squad:squad_members() do
			local npc = k.object or k.id and alife_object(k.id)
			if npc then
				SIMBOARD:setup_squad_and_group(npc)
			end
		end
	end

	dbg_printf("[WG] Squad with id %s successfully created", squad.id)

	return squad
end

-- Function used to spawn a dead squad, at a given point in space
function spawn_dead_squad(sec,pos,lvid,gvid)
	local squad = spawn_squad(sec, pos, lvid, gvid)
	if not squad then return end

	local member_id = nil

	for npc in squad:squad_members() do
		CreatePersistentTimeEvent("western_goods_delay_kill_squad",npc.id,math.random(5,10),surge_manager.make_dead,npc.id)
		member_id = npc.id
	end

	dbg_printf("[WG] Squad with id %s successfully killed", squad.id)

	return member_id
end

-- Function used to get the ID from a random member of a squad
function get_member_id_from_squad(squad)
	if not squad then return end

	for member in squad:squad_members() do
		return member.id
	end
end

-- Function used to get a "random" member of a squad
function get_member_from_squad(squad)
	if not squad then return end

	for member in squad:squad_members() do
		return member
	end
end

-- Function used to find an NPC by its section name in the player squad
-- Warning : if multiple NPCs with that section exist, it'll only return the first one it finds
function find_npc_in_actor_squad(sec)
	local actor_squad = axr_companions.list_actor_squad_by_id()
	for _,id in pairs(actor_squad) do
		local se_npc = alife_object(id)
		if se_npc and se_npc:section_name() == sec then
			return se_npc
		end
	end
end


--[[----------------------------------------------------------------------------------------------------
	Load CreatePersistentTimeEvent function
------------------------------------------------------------------------------------------------------]]

function on_game_start()
	CreatePersistentTimeEvent = western_goods_persistent_timed_events.CreatePersistentTimeEvent
end