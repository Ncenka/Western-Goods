--- Original Author(s) : NLTP_ASHES
--- Edited : N/A
--- Date : 17/04/2023
--- License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)
---
--- Script used to manage the Mercenary flea market system.

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- Imported functions
local dbg_printf = western_goods_utils.dbg_printf

-- Constants
local ini_sections = ini_file([[plugins\western_goods\flea_market\importer.ltx]])

-- Variables
local offers = {}

-- ---------------------------------------------------------------------------------------------------------------------
-- Functions
-- ---------------------------------------------------------------------------------------------------------------------

function generate_offers(count)
    local new_offers = {}

    local viable_sections = get_viable_sections()

    dbg_printf("[WG] Flea Market | Generating %s offers...", count)

    for i = 1, count do
        local amount = math.random(1,10)
        local section = viable_sections[math.random(1,size_table(viable_sections))]
        local discount = math.random(5,50)

        table.insert(new_offers,{ sec=section, qte=amount, sale=discount })
    end

    dbg_printf("[WG] Flea Market | Generated %s offers :\n%s", count, utils_data.print_table(new_offers, false, true))

    return new_offers
end

function get_viable_sections()
    local viable_sections = {}

    ini_sections:section_for_each(function(section)
        dbg_printf("[WG] Flea Market | Collecting viable sections from '%s'...", section)
        local sec_names = utils_data.collect_section(ini_sections, section, true)
        for sec_name,_ in pairs(sec_names) do
            table.insert(viable_sections,sec_name)
        end
    end)

    dbg_printf("[WG] Flea Market | Collected %s viable sections", size_table(viable_sections))

    return viable_sections
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Callbacks registration
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to register callbacks.
--- @return nil
function on_game_start()
    RegisterScriptCallback("save_state", save_state)
    RegisterScriptCallback("load_state", load_state)

    -- TODO : Test code - to be removed
    RegisterScriptCallback("on_key_press",test_func)
end


-- ---------------------------------------------------------------------------------------------------------------------
-- Data persistence
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to store information in the save file.
--- @param m_data table
--- @return nil
function save_state(m_data)
    m_data.wg_flea_offers = offers
end

--- Function used to load information stored in the save file.
--- @param m_data table
--- @return nil
function load_state(m_data)
    offers = m_data.wg_flea_offers or {}
end


-- ---------------------------------------------------------------------------------------------------------------------
-- Test functions		TODO : Remove this section
-- ---------------------------------------------------------------------------------------------------------------------

function test_func(dik)
    if dik ~= DIK_keys.DIK_P then return end

    this.generate_offers(5)
end