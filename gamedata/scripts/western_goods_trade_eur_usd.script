--- Original Author(s) : NLTP_ASHES
--- Edited : N/A
--- Date : 22/05/2023
--- License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)
---
--- Script used to manage the trade system, but with Euros/Dollars instead of Roubles.
---
--- Known issues :
--- - The trader's inventory will refresh every time the player enters trading mode.

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables, imported functions and new callbacks
-- ---------------------------------------------------------------------------------------------------------------------

-- New callbacks
AddScriptCallback("western_goods_trade_eur_usd_on_dialog")

-- Imported functions
local dbg_printf = western_goods_utils.dbg_printf
local level_object_by_id = western_goods_utils.level_object_by_id

-- Constants
local bags_to_tint = { actor_equ = true, actor_bag = true, actor_trade = true, actor_trade_bag = true }

-- Variables
local traders_list = {}

-- ---------------------------------------------------------------------------------------------------------------------
-- General Dialog Functions
-- ---------------------------------------------------------------------------------------------------------------------

TraderUpdate = trade_manager.update
--- Function called when the player uses the trade line of dialog.
--- @param npc game_object
--- @param actor game_object
--- @return nil
function start_trade(npc, actor)
    trader_autoinject.TraderUpdate(npc, true)
    CreateTimeEvent("delay_open_trade", npc:id(), 0, function()
        if hide_hud_inventory() then
            traders_list[npc:section()] = true
            npc:start_trade(actor)
            return true
        end
    end)
end

--- Function called to determine if the trade line of dialog should be shown.
--- @param npc game_object
--- @param actor game_object
--- @param dialog_id string
--- @return table
function cond_trade_dialog(actor, npc, dialog_id)
    local flags = { result = true }
    SendScriptCallback("western_goods_trade_eur_usd_on_dialog",actor,npc,flags)
    return flags.result
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Trading actions/restrictions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to allow/disallow the player from moving items from one container to another when trading with a EUR/USD trader.
--- @param flags table
--- @param npc_id number
--- @param obj game_object
--- @param mode string
--- @param bag string
--- @return nil
function check_move_item(flags, npc_id, obj, mode, bag)
    if mode ~= "trade" then return flags.ret_value end

    local npc = npc_id and level_object_by_id(npc_id)

    -- Always allow items in NPC inventory to be moved
    if utils_item.in_npc_inv(npc, obj) then return end

    -- If you are talking to a EUR/USD trader and the item isn't tradable, prevent the item from moving
    if this.is_eur_usd_trader(npc:section()) and not this.is_tradable(obj) then
        flags.ret_value = false
    end
end

--- Function used to color the untradable items in the player inventory.
--- @param cell table
--- @return fcolor
function tint_functor(cell)
    local ui_instance = ui_inventory.GUI

    if not ui_instance then return end

    local partner = ui_instance:GetPartner()

    if (ui_instance.mode ~= "trade")
    or (not bags_to_tint[cell.container.ID])
    or (not partner)
    or (not this.is_eur_usd_trader(partner:section()))
    or (utils_item.in_npc_inv(partner, cell.container:GetObj(cell.indx)))
    or (this.is_tradable(cell.container:GetObj(cell.indx)))
    then return end

    -- If you're in the trade mode with a EUR/USD trader, and the item isn't tradable, tint it in red
    return GetARGB(240, 250, 0, 0)
end

TMode_SellBase = ui_inventory.UIInventory.TMode_Sell
--- Monkey-patching ui_inventory.UIInventory.TMode_Sell to change the trade logic to a sort of barter system with the trader.
--- @param self UIInventory
--- @return nil
function ui_inventory.UIInventory.TMode_Sell(self)
    -- If we aren't talking to a EUR/USD trader, process normally
    local npc = self:GetPartner()
    if not npc or not this.is_eur_usd_trader(npc:section()) then
        TMode_SellBase(self)
        return
    end

    make_exchange(self, npc)
end

TMode_BuyBase = ui_inventory.UIInventory.TMode_Buy
--- Monkey-patching ui_inventory.UIInventory.TMode_Buy to change the trade logic to a sort of barter system with the trader.
--- @param self UIInventory
--- @return nil
function ui_inventory.UIInventory.TMode_Buy(self)
    -- If we aren't talking to a EUR/USD trader, process normally
    local npc = self:GetPartner()
    if not npc or not this.is_eur_usd_trader(npc:section()) then
        TMode_BuyBase(self)
        return
    end

    make_exchange(self, npc)
end

--- Function called when the player clicks Sell/Buy in the trade UI.
--- This function makes a few checks, and then proceeds to exchange the money for the items selected.
--- @param self UIInventory
--- @param npc game_object
--- @return nil
function make_exchange(self, npc)
    -- Get sell cells
    local cc_sell = self.CC["actor_trade"]
    if (not cc_sell) then
        return
    end
    if size_table(cc_sell.indx_id) <= 0 then
        self.message_box:InitMessageBox("message_box_ok")
        self.message_box:SetText(western_goods_utils.get_translation("st_wg_trader_empty_sell"))
        self.message_box:ShowDialog(true)
        return
    end

    -- Get buy sells
    local cc_buy = self.CC["npc_trade"]
    if (not cc_buy) then
        return
    end
    if size_table(cc_buy.indx_id) <= 0 then
        self.message_box:InitMessageBox("message_box_ok")
        self.message_box:SetText(western_goods_utils.get_translation("st_wg_trader_empty_buy"))
        self.message_box:ShowDialog(true)
        return
    end

    -- Calculate full sell price
    local tot_sell_cost = 0
    for _,ci in pairs(cc_sell.cell) do
        tot_sell_cost = tot_sell_cost + cc_sell:GetCellCost(ci)
    end
    tot_sell_cost = math.ceil(tot_sell_cost)

    -- Calculate full buy price
    local tot_buy_cost = 0
    for _,ci in pairs(cc_buy.cell) do
        tot_buy_cost = tot_buy_cost + cc_buy:GetCellCost(ci)
    end
    tot_buy_cost = math.ceil(tot_buy_cost)

    -- Don't processed the sell price < buy price
    if tot_sell_cost < tot_buy_cost then
        self.message_box:InitMessageBox("message_box_ok")
        self.message_box:SetText(western_goods_utils.get_translation("st_wg_trader_uneven_value"))
        self.message_box:ShowDialog(true)
        return
    end

    -- Make the trade
    dbg_printf("[WG] Western Goods Trader | Traded :")
    for id,_ in pairs(cc_sell.indx_id) do
        local obj = level_object_by_id(id)
        dbg_printf("[WG] - [%s] %s", obj:id(), obj:section())
        self:On_Item_Exchange(db.actor, npc, obj)
    end
    dbg_printf("[WG] Western Goods Trader | In exchange for :")
    for id,_ in pairs(cc_buy.indx_id) do
        local obj = level_object_by_id(id)
        dbg_printf("[WG] - [%s] %s", obj:id(), obj:section())
        self:On_Item_Exchange(npc, db.actor, obj)
    end

    -- Update UI
    self:UpdateInfo(true)

    -- Clean trader inventory
    CreateTimeEvent("delete_traded_items",npc:id(),0.01,function()
        dbg_printf("[WG] Western Goods Trader | Cleaning traded items :")
        western_goods_utils.inventory_iter(npc,function(owner, obj)
            if this.is_tradable(obj) then
                dbg_printf("[WG] - [%s] %s", obj:id(), obj:section())
                alife_release_id(obj:id())
            end
        end)
        return true
    end)
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Barter actions/restrictions
-- ---------------------------------------------------------------------------------------------------------------------

if western_goods_core.is_barter_ui_installed() then
    GUI_on_showBase = barter_ui.GUI_on_show
    --- Monkey-patching barter_ui.GUI_on_show to prevent the Barter button from showing if the NPC is a EUR/USD trader.
    --- @param name string
    --- @param path string
    --- @return nil
    function barter_ui.GUI_on_show(name, path)
        local ui_instance = ui_inventory.GUI
        if name ~= "UIInventory" or (not ui_instance) then return end

        local partner = ui_instance:GetPartner()

        printf("[TEST] partner %s",partner)
        printf("[TEST] partner ID %s",partner and partner:id())
        printf("[TEST] is_eur_usd_trader ID %s",partner and this.is_eur_usd_trader(partner:section()))

        if partner and this.is_eur_usd_trader(partner:section()) then return end

        GUI_on_showBase(name, path)
    end
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Callbacks registration
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to register callbacks.
--- @return nil
function on_game_start()
    rax_icon_tint.register("wg_tint_functor", tint_functor)
    RegisterScriptCallback("ActorMenu_on_item_before_move", check_move_item)
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Service Functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to know if an NPC is a EUR/USD trader or not.
--- @param section string
--- @return boolean
function is_eur_usd_trader(section)
    return traders_list[section] or false
end

--- Function used to know if an object is tradable with the western goods trader.
--- @param obj game_object
--- @return boolean
function is_tradable(obj)
    for i,_ in pairs(western_goods_core.western_goods_items) do
        local section = western_goods_core.table_item_field_by_key(western_goods_core.western_goods_items, i, "section")
        local type = western_goods_core.table_item_field_by_key(western_goods_core.western_goods_items, i, "type")

        -- Is tradable if item is in actor inventory, and is of type money
        if obj:section() == section and type == "money" then
            return true
        end
    end

    -- All other items are forbidden for trade
    return false
end
