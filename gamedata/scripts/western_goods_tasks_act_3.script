--- Original Author(s) : NLTP_ASHES
--- Edited : N/A
--- Date : 17/04/2023
--- License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)
---
--- Script used to manage the tasks of the third act of the addon's storyline.
---
--- Each task is composed of the following elements :
--- - A act_3_task_X_start(...) function, used to start the task;
--- - A act_3_task_X_end(...) function, used to end the task;
--- - A xr_effects.act_3_task_X_init(...) function, called when the task has started;
--- - A xr_effects.act_3_task_X_complete(...) function, called when the task was successfully completed;
--- - A xr_effects.act_3_task_X_fail(...) function, called when the task was failed;
--- - A task_functor.act_3_task_X_title_f(...) function, called periodically to get the task's name;
--- - A task_functor.act_3_task_X_descr_f(...) function, called periodically to get the task's description;
--- - A task_functor.act_3_task_X_target_f(...) function, called periodically to get the task's target (for the PDA);
--- - A task_status_functor.act_3_task_X_status_f(...) function, called periodically to run the core logic of the task.

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- Imported functions
local dbg_printf = western_goods_utils.dbg_printf
local send_dialog = western_goods_dialogs_manager.send_dialog
local find_object_by_id = western_goods_utils.find_object_by_id

-- Constants
local CONST_TASK_1_USB_UNLOCK_DIALOG_ID = "western_goods_act_3_task_1_usb_unlock"
local CONST_TASK_1_USB_UNLOCK_COST = 5000

-- Task variables
TASK_1_CACHE = {}


-- ---------------------------------------------------------------------------------------------------------------------
-- ACT 3 - CONTRACT WORK
-- ---------------------------------------------------------------------------------------------------------------------
-- TASK 1 - KOLOBOK
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to start Act 3, Task 1.
--- @param first_speaker cse_alife_object
--- @param second_speaker cse_alife_object
--- @return nil
function act_3_task_1_start(first_speaker, second_speaker)
    local npc = dialogs.who_is_npc(first_speaker, second_speaker)
    task_manager.get_task_manager():give_task("western_goods_act_3_task_1", npc:id())
    dbg_printf("[WG] Tasks Act 3 | Task 1 - Task started...")
end

--- Function used to end Act 3, Task 1.
--- @return nil
function act_3_task_1_end()
    task_manager.get_task_manager():set_task_completed("western_goods_act_3_task_1")
    dbg_printf("[WG] Tasks Act 3 | Task 1 - Task completed...")
end

--- Function called when the task is initiated.
--- @param actor cse_alife_object
--- @param npc cse_alife_object
--- @return nil
function xr_effects.act_3_task_1_init(actor,npc)
    -- Prepare task cache table
    TASK_1_CACHE = {
        main_item = { sec="wg_danylo_pendrive_quest_item" },
        danylo_note = "encyclopedia__notes_western_goods_hand_drawn_map",
        squads = {
            danylo_spawn_data = { sec="stalker_danylo_chernenko_squad", smart="jup_a6" },
        },
    }

    -- Process info portions
    western_goods_utils.give_info("western_goods_act_3_task_1_active")
    western_goods_utils.give_info("western_goods_act_3_task_1_init")
end

--- Function called when the task is successfully completed.
--- @param actor cse_alife_object
--- @param npc cse_alife_object
--- @return nil
function xr_effects.act_3_task_1_complete(actor,npc)
    -- Process info portions
    western_goods_utils.rem_info("western_goods_act_3_task_1_active")
    western_goods_utils.rem_info("western_goods_act_3_task_1_init")
    western_goods_utils.give_info("western_goods_act_3_task_1_finished")
end

--- Function called when the task is failed.
--- @param actor cse_alife_object
--- @param npc cse_alife_object
--- @return nil
function xr_effects.act_3_task_1_fail(actor,npc)
    -- Process info portions
    western_goods_utils.rem_info("western_goods_act_3_task_1_active")
    western_goods_utils.rem_info("western_goods_act_3_task_1_init")

    -- Process penalty
    xr_effects.fail_task_dec_goodwill(actor,npc,{"50","killer"})
end

--- Function used to retrieve the title of the mission (displayed in the PDA).
--- @param task_id number
--- @param field string
--- @param p any
--- @param tsk CGameTask
--- @return string
function task_functor.act_3_task_1_title_f(task_id,field,p,tsk)
    if true then -- Cond to force my IDE to fold this fucking function correctly
        return western_goods_utils.get_translation("st_wg_act_3_task_1_title")
    end
end

--- Function used to retrieve the description of the mission (displayed in the PDA).
--- Warning : naming contract on the translation string : st_wg_trader_act_2_task_1_stage_<stage>_descr.
--- @param task_id number
--- @param field string
--- @param p any
--- @param tsk CGameTask
--- @return string
function task_functor.act_3_task_1_descr_f(task_id,field,p,tsk)
    if true then -- Cond to force my IDE to fold this fucking function correctly
        return western_goods_utils.get_translation("st_wg_act_3_task_1_stage_" .. tostring(tsk.stage) .. "_descr")
    end
end

--- Function used to retrieve the target of the mission (marker displayed (or not) in the PDA).
--- @param task_id number
--- @param field string
--- @param p any
--- @param tsk CGameTask
--- @return number
function task_functor.act_3_task_1_target_f(task_id,field,p,tsk)
    if western_goods_utils.has_info("western_goods_act_3_task_1_init") then
        if tsk.stage == 0 then
            local usb_se = western_goods_utils.se_object_by_sid(TASK_1_CACHE.main_item.sec)
            return usb_se and usb_se.id
        end
        if tsk.stage == 1 then
            local usb_se = western_goods_utils.se_object_by_sid(TASK_1_CACHE.main_item.sec)
            return usb_se and usb_se.id
        end
        if tsk.stage == 2 then
            return nil
        end
        if tsk.stage == 3 then
            if western_goods_mcm.get_config("guided_tasks") then
                local squad_se = western_goods_utils.se_object_by_sid(TASK_1_CACHE.squads.danylo_spawn_data.sec)
                return squad_se and squad_se.id
            end
        end
    end
end

--- Function used to manage the mission logic as a whole.
--- @param tsk CGameTask
--- @param task_id number
--- @return string
function task_status_functor.act_3_task_1_status_f(tsk,task_id)
    if western_goods_utils.has_info("western_goods_act_3_task_1_init") then
        -- First stage : Find the USB drive
        if tsk.stage == 0 then
            local usb_se = western_goods_utils.se_object_by_sid(TASK_1_CACHE.main_item.sec)

            -- Spawn/respawn quest item if it doesn't exist
            if not usb_se then
                usb_se = alife_create_item(TASK_1_CACHE.main_item.sec, task_1_get_spawn_stash())
                dbg_printf("[WG] Tasks Act 3 | Task 1 - Stage 0 - Primary item spawned %s", usb_se.id)
                return
            end

            -- If the player picked up the supplies, progress to stage 3
            if usb_se and usb_se.parent_id == AC_ID then
                dbg_printf("[WG] Tasks Act 3 | Task 1 - Stage 0 - Player picked up the primary item %s", usb_se.id)

                local danylo_squad_se = western_goods_utils.se_object_by_sid(TASK_1_CACHE.squads.danylo_spawn_data.sec)

                if not danylo_squad_se and not TASK_1_CACHE.danylo_squad_spawned then
                    local sec = TASK_1_CACHE.squads.danylo_spawn_data.sec
                    local smart = TASK_1_CACHE.squads.danylo_spawn_data.smart
                    danylo_squad_se = western_goods_utils.spawn_squad_smart(sec, smart)

                    TASK_1_CACHE.danylo_squad_spawned = true
                end

                tsk.stage = 2
                return
            end
        end

        -- Second stage : Get the USB drive
        if tsk.stage == 1 then
            local usb_se = western_goods_utils.se_object_by_sid(TASK_1_CACHE.main_item.sec)

            -- Respawn quest item if it doesn't exist
            if not usb_se then
                usb_se = alife_create_item(TASK_1_CACHE.main_item.sec, task_1_get_spawn_stash())
                dbg_printf("[WG] Tasks Act 3 | Task 1 - Stage 1 - Primary item respawned  %s", usb_se.id)
                return
            end

            if usb_se and usb_se.parent_id == AC_ID then
                dbg_printf("[WG] Tasks Act 3 | Task 1 - Stage 1 - Player picked up the primary item %s", usb_se.id)

                tsk.stage = 2
                return
            end
        end

        -- Second stage : Access information
        if tsk.stage == 2 then
            local usb_se = western_goods_utils.se_object_by_sid(TASK_1_CACHE.main_item.sec)

            if usb_se and usb_se.parent_id ~= AC_ID then
                dbg_printf("[WG] Tasks Act 3 | Task 1 - Stage 2 - Player dropped the primary item %s", usb_se.id)
                tsk.stage = 1
                return
            end

            western_goods_utils.give_info("western_goods_act_3_task_1_ready_finished")

            if ui_pda_encyclopedia_tab.is_unlocked_note(TASK_1_CACHE.danylo_note) then
                dbg_printf("[WG] Tasks Act 3 | Task 1 - Stage 2 - Player unlocked Danylo's note...")
                tsk.stage = 3
                return
            end
        end

        -- Second stage : Meet with Danylo
        if tsk.stage == 3 then
        end
    end
end


-- ---------------------------------------------------------------------------------------------------------------------
-- Callbacks registration
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to register callbacks.
--- @return nil
function on_game_start()
    RegisterScriptCallback("save_state", save_state)
    RegisterScriptCallback("load_state", load_state)
    RegisterScriptCallback("on_specific_character_dialog_list", task_1_usb_unlock_dialog)
end


-- ---------------------------------------------------------------------------------------------------------------------
-- Data persistence
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to store information in the save file.
--- @param m_data table
--- @return nil
function save_state(m_data)
    -- Prepare save tables
    local TASK_1_SAVE = {}

    -- Make copies of task caches
    copy_table(TASK_1_SAVE, TASK_1_CACHE)

    -- Pre-process tables

    -- Save tables
    m_data.wg_act_3_task_1_cache = TASK_1_SAVE

    -- Debug prints
    dbg_printf("[WG] Tasks Act 3 | Task 1 - Saved variables...\n%s",utils_data.print_table(TASK_1_SAVE, false, true))
end

--- Function used to load information stored in the save file.
--- @param m_data table
--- @return nil
function load_state(m_data)
    -- Retrieve save tables
    local TASK_1_SAVE = m_data.wg_act_3_task_1_cache or {}

    -- Post-process tables

    -- Restore task caches
    copy_table(TASK_1_CACHE, TASK_1_SAVE)

    -- Debug prints
    dbg_printf("[WG] Tasks Act 3 | Task 1 - Loaded variables...\n%s",utils_data.print_table(TASK_1_CACHE, false, true))
end


-- ---------------------------------------------------------------------------------------------------------------------
-- General functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to give the player a reward for finishing act 1.
--- @return cse_alife_object|nil
function task_1_give_item(first_speaker, second_speaker)
    dialogs.relocate_item_section_to_actor(first_speaker, second_speaker, "wg_stash_map_quest_item")
end

--- Function used to get the server object of the stash in which to spawn Act 3, Task 1's primary quest item.
--- @return cse_alife_object|nil
function task_1_get_spawn_stash()
    local stash_se = nil

    western_goods_utils.server_objects_iter(function(se_obj)
        local obj_lid = se_obj and game_graph():vertex(se_obj.m_game_vertex_id):level_id()
        local obj_lname = obj_lid and obj_lid < 50 and alife():level_name(obj_lid)

        if obj_lname == "l03u_agr_underground" and se_obj:name() == "level_prefix_inventory_box_0001" then
            stash_se = se_obj
            dbg_printf("[WG] Tasks Act 3 | Task 1 - Found Agroprom's stash %s", stash_se.id)
            return true
        end
    end)

    return stash_se
end

--- Function used to add a task dialog to all technicians.
--- @param character_id string
--- @param dialog_list table
--- @return nil
function task_1_usb_unlock_dialog(character_id, dialog_list)
    if dialog_list:has("dm_init_mechanic") then
        local res = dialog_list:add(CONST_TASK_1_USB_UNLOCK_DIALOG_ID)
        if res then
            dbg_printf("[WG] Tasks Act 3 | Task 1 - Added dialog %s for %s, pos %s", CONST_TASK_1_USB_UNLOCK_DIALOG_ID, character_id, res)
        end
    end
end

--- Function used to determine if the task dialog should be shown or not.
--- @return boolean
function task_1_usb_unlock_dialog_cond()
    local cond_stage = xr_conditions.check_task_stage(nil,nil,{"western_goods_act_3_task_1","2"})
    local cond_note = not ui_pda_encyclopedia_tab.is_unlocked_note(TASK_1_CACHE.danylo_note)
    local cond_obj = db.actor:object("wg_danylo_pendrive_quest_item")
    return cond_stage and cond_obj and cond_note
end

--- Function used to determine if the player has enough money to use the task dialog line.
--- @return boolean
function task_1_usb_unlock_money_cond()
    return db.actor:money() >= CONST_TASK_1_USB_UNLOCK_COST
end

--- Function used to unlock the pda encyclopedia entry via a technician.
--- @param actor game_object
--- @param npc game_object
--- @return nil
function task_1_usb_unlock(npc, actor)
    western_goods_usable_items.use_danylo_pendrive()
    dialogs.relocate_money(npc, CONST_TASK_1_USB_UNLOCK_COST, "out")
end