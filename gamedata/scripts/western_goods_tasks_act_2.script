---[[
--- Original Author(s) : NLTP_ASHES
--- Edited : N/A
--- Date : 03/03/2023
--- License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)
---
--- Script used to manage the tasks of the Western Goods addon.
---]]

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants, global variables and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- Imported functions
local get_translation = game.translate_string
local dbg_printf = western_goods_utils.dbg_printf
local get_distance = western_goods_utils.get_distance
local find_object_by_id = western_goods_utils.find_object_by_id
local CreatePersistentTimeEvent = western_goods_persistent_timed_events.CreatePersistentTimeEvent
local heli_spawn = western_goods_helicopter.heli_spawn
local heli_register = western_goods_helicopter.heli_register
local spawn_story_squad = western_goods_utils.spawn_story_squad
local spawn_squad = western_goods_utils.spawn_squad
local spawn_dead_squad = western_goods_utils.spawn_dead_squad
local get_member_id_from_squad = western_goods_utils.get_member_id_from_squad
local get_member_from_squad = western_goods_utils.get_member_from_squad
local find_unique_npc = western_goods_utils.find_unique_npc
local find_npc_in_actor_squad = western_goods_utils.find_npc_in_actor_squad
local send_dialog = western_goods_dialogs_manager.send_dialog
local se_object_by_sid = western_goods_utils.se_object_by_sid
local game_object_by_sid = western_goods_utils.game_object_by_sid

-- Task variables
TASK_1_CACHE = {}
TASK_2_CACHE = {}
TASK_3_CACHE = {}


-- ---------------------------------------------------------------------------------------------------------------------
-- ACT 2 - CONTRACT WORK
-- ---------------------------------------------------------------------------------------------------------------------
-- TASK 1 - KOLOBOK
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to start Act 2, Task 1.
--- @param first_speaker cse_alife_object
--- @param second_speaker cse_alife_object
--- @return nil
function start_task_1(first_speaker, second_speaker)
	local npc = dialogs.who_is_npc(first_speaker, second_speaker)
	task_manager.get_task_manager():give_task("western_goods_act_2_task_1", npc:id())
end

--- Function used to end Act 2, Task 1.
--- @return nil
function end_task_1()
	local kolobok_found = false

	-- Items in player inventory that have a section among the ones in fallback_items
	local secondary_items_found = {}

	-- Iterate player inventory to find if he has kolobok, and gather fallback items in the process
	db.actor:iterate_inventory(function(owner, obj)
		local is_main_item = obj:section() == TASK_1_CACHE.main_item
		local is_secondary_item = western_goods_utils.table_contains(TASK_1_CACHE.secondary_items, obj:section())
		if is_main_item then
			kolobok_found = true
			return
		elseif is_secondary_item then
			table.insert(secondary_items_found, obj)
		end
	end)

	-- If the player doesn't have a Kolobok, use one of the fallback items
	if not kolobok_found then
		for _,obj in pairs(secondary_items_found) do
			itms_manager.use_arty_container(obj)
			break
		end
	end

	task_manager.get_task_manager():set_task_completed("western_goods_act_2_task_1")

	TASK_2_CACHE.available_time = time_global() + 30000
end

--- Function called when the task is initiated.
--- @param actor cse_alife_object
--- @param npc cse_alife_object
--- @return nil
function xr_effects.western_goods_act_2_task_1_init(actor,npc)
	give_info("western_goods_act_2_task_1_active")

	TASK_1_CACHE.main_item = "af_fuzz_kolobok"
	TASK_1_CACHE.secondary_items = {
		"af_fuzz_kolobok_lead_box",
		"af_fuzz_kolobok_af_aac",
		"af_fuzz_kolobok_af_aam",
		"af_fuzz_kolobok_af_iam"
	}
end

--- Function called when the task is successfully completed.
--- @param actor cse_alife_object
--- @param npc cse_alife_object
--- @return nil
function xr_effects.western_goods_act_2_task_1_complete(actor,npc)
	disable_info("western_goods_act_2_task_1_active")
	give_info("western_goods_act_2_task_1_finished")
	xr_effects.reward_random_money(actor,npc,{"10000","15000"})
	xr_effects.remove_item(actor, npc, {"af_fuzz_kolobok"})
	xr_effects.complete_task_inc_goodwill(actor,npc,{"25","killer"})
end

--- Function called when the task is failed.
--- @param actor cse_alife_object
--- @param npc cse_alife_object
--- @return nil
function xr_effects.western_goods_act_2_task_1_fail(actor,npc)
	disable_info("western_goods_act_2_task_1_active")
	xr_effects.fail_task_dec_goodwill(actor,npc,{"35","killer"})
end

--- Function used to retrieve the title of the mission (displayed in the PDA).
--- @param task_id number
--- @param field string
--- @param p any
--- @param tsk CGameTask
--- @return string
function task_functor.act_2_task_1_title_f(task_id,field,p,tsk)
	return game.translate_string("st_wg_act_2_task_1_title")
end

--- Function used to retrieve the description of the mission (displayed in the PDA).
--- Warning : naming contract on the translation string : st_wg_trader_act_2_task_1_stage_<stage>_descr.
--- @param task_id number
--- @param field string
--- @param p any
--- @param tsk CGameTask
--- @return string
function task_functor.act_2_task_1_descr_f(task_id,field,p,tsk)
	return game.translate_string("st_wg_act_2_task_1_stage_" .. tostring(tsk.stage) .. "_descr")
end

--- Function used to retrieve the target of the mission (marker displayed (or not) in the PDA).
--- @param task_id number
--- @param field string
--- @param p any
--- @param tsk CGameTask
--- @return number
function task_functor.act_2_task_1_target_f(task_id,field,p,tsk)
	if tsk.stage == 0 then
		return nil
	end
	if tsk.stage == 1 then
		return tsk.task_giver_id
	end
end

--- Function used to manage the mission logic as a whole.
--- @param tsk CGameTask
--- @param task_id number
--- @return string
function task_status_functor.act_2_task_1_status_f(tsk,task_id)

	-- First stage :
	if tsk.stage == 0 then
		return act_2_task_1_stage_0_status_f(tsk,task_id)
	end

	-- Second stage :
	if tsk.stage == 1 then
		return act_2_task_1_stage_1_status_f(tsk,task_id)
	end
end

function act_2_task_1_stage_0_status_f(tsk,task_id)
	db.actor:iterate_inventory(function(owner, obj)
		local is_main_item = obj:section() == TASK_1_CACHE.main_item
		local is_secondary_item = western_goods_utils.table_contains(TASK_1_CACHE.secondary_items, obj:section())
		if is_main_item or is_secondary_item then
			tsk.stage = 1
			return
		end
	end)
end

function act_2_task_1_stage_1_status_f(tsk,task_id)

	local has_item = false

	db.actor:iterate_inventory(function(owner, obj)
		local is_main_item = obj:section() == TASK_1_CACHE.main_item
		local is_secondary_item = western_goods_utils.table_contains(TASK_1_CACHE.secondary_items, obj:section())
		if is_main_item or is_secondary_item then
			has_item = true
			return
		end
	end)

	if not has_item then
		disable_info("western_goods_act_2_task_1_ready_finished")
		tsk.stage = 0
	else
		give_info("western_goods_act_2_task_1_ready_finished")
	end
end


-- ---------------------------------------------------------------------------------------------------------------------
-- TASK 2 - RETRIEVAL MISSION
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to start Act 2, Task 2.
--- @param task_giver cse_alife_object
--- @return nil
function start_task_2(task_giver)
	task_manager.get_task_manager():give_task("western_goods_act_2_task_2", task_giver.id)
end

--- Function used to end Act 2, Task 2.
--- @return nil
function end_task_2()
	task_manager.get_task_manager():set_task_completed("western_goods_act_2_task_2")
end

--- Function called when the task is initiated.
--- @param actor cse_alife_object
--- @param npc cse_alife_object
--- @return nil
function xr_effects.western_goods_act_2_task_2_init(actor,npc)
	give_info("western_goods_act_2_task_2_active")

	TASK_2_CACHE.zombie_1_spawn_data = {x=-94.6,y=-0.3,z=-58.3,lvid=96550,gvid=4947}
	TASK_2_CACHE.snork_spawn_data = {x=25.8,y=-4.3,z=123.5,lvid=231878,gvid=4970}
	TASK_2_CACHE.bandit_1_spawn_data = {x=26.5,y=-0.6,z=133.0,lvid=232810,gvid=4970}
end

--- Function called when the task is successfully completed.
--- @param actor cse_alife_object
--- @param npc cse_alife_object
--- @return nil
function xr_effects.western_goods_act_2_task_2_complete(actor,npc)
	disable_info("western_goods_act_2_task_2_active")
	give_info("western_goods_act_2_task_2_finished")
	xr_effects.reward_random_money(actor,npc,{"15000","20000"})
	xr_effects.complete_task_inc_goodwill(actor,npc,{"100","killer"})
end

--- Function called when the task is failed.
--- @param actor cse_alife_object
--- @param npc cse_alife_object
--- @return nil
function xr_effects.western_goods_act_2_task_2_fail(actor,npc)
	disable_info("western_goods_act_2_task_2_active")
	xr_effects.fail_task_dec_goodwill(actor,npc,{"40","killer"})
end

--- Function used to retrieve the title of the mission (displayed in the PDA).
--- @param task_id number
--- @param field string
--- @param p any
--- @param tsk CGameTask
--- @return string
function task_functor.act_2_task_2_title_f(task_id,field,p,tsk)
	return game.translate_string("st_wg_act_2_task_2_title")
end

--- Function used to retrieve the description of the mission (displayed in the PDA).
--- Warning : naming contract on the translation string : st_wg_trader_act_2_task_2_stage_<stage>_descr.
--- @param task_id number
--- @param field string
--- @param p any
--- @param tsk CGameTask
--- @return string
function task_functor.act_2_task_2_descr_f(task_id,field,p,tsk)
	return game.translate_string("st_wg_act_2_task_2_stage_" .. tostring(tsk.stage) .. "_descr")
end

--- Function used to retrieve the target of the mission (marker displayed (or not) in the PDA).
--- @param task_id number
--- @param field string
--- @param p any
--- @param tsk CGameTask
--- @return number
function task_functor.act_2_task_2_target_f(task_id,field,p,tsk)
	if tsk.stage == 0 then
		return nil
	end
	if tsk.stage == 1 then
		return nil
	end
	if tsk.stage == 2 then
		return nil
	end
	if tsk.stage == 3 then
		return nil
	end
	if tsk.stage == 4 then
		return nil
	end
	if tsk.stage == 5 then
		return nil
	end
	if tsk.stage == 6 then
		return nil
	end
	if tsk.stage == 7 then
		return nil
	end
	if tsk.stage == 8 then
		return nil
	end
	if tsk.stage == 9 then
		return nil
	end
	if tsk.stage == 10 then
		return tsk.task_giver_id
	end
end

--- Function used to manage the mission logic as a whole.
--- @param tsk CGameTask
--- @param task_id number
--- @return string
function task_status_functor.act_2_task_2_status_f(tsk,task_id)

	-- First stage :
	if tsk.stage == 0 then
		return act_2_task_2_stage_0_status_f(tsk,task_id)
	end

	-- Second stage :
	if tsk.stage == 1 then
		return act_2_task_2_stage_1_status_f(tsk,task_id)
	end

	-- Third stage :
	if tsk.stage == 2 then
		return act_2_task_2_stage_2_status_f(tsk,task_id)
	end

	-- Fourth stage :
	if tsk.stage == 3 then
		return act_2_task_2_stage_3_status_f(tsk,task_id)
	end

	-- Fifth stage :
	if tsk.stage == 4 then
		return act_2_task_2_stage_4_status_f(tsk,task_id)
	end

	-- Sixth stage :
	if tsk.stage == 5 then
		return act_2_task_2_stage_5_status_f(tsk,task_id)
	end

	-- Seventh stage :
	if tsk.stage == 6 then
		return act_2_task_2_stage_6_status_f(tsk,task_id)
	end

	-- Eighth stage :
	if tsk.stage == 7 then
		return act_2_task_2_stage_7_status_f(tsk,task_id)
	end

	-- Ninth stage :
	if tsk.stage == 8 then
		return act_2_task_2_stage_8_status_f(tsk,task_id)
	end

	-- Tenth stage :
	if tsk.stage == 9 then
		return act_2_task_2_stage_9_status_f(tsk,task_id)
	end

	-- Eleventh stage :
	if tsk.stage == 10 then
		return act_2_task_2_stage_10_status_f(tsk,task_id)
	end
end

function act_2_task_2_stage_0_status_f(tsk,task_id)

	tsk.stage = curr_stage
end

function act_2_task_2_stage_1_status_f(tsk,task_id)

	tsk.stage = curr_stage
end

function act_2_task_2_stage_2_status_f(tsk,task_id)

	tsk.stage = curr_stage
end

function act_2_task_2_stage_3_status_f(tsk,task_id)

	tsk.stage = curr_stage
end

function act_2_task_2_stage_4_status_f(tsk,task_id)

	tsk.stage = curr_stage
end

function act_2_task_2_stage_5_status_f(tsk,task_id)

	tsk.stage = curr_stage
end

function act_2_task_2_stage_6_status_f(tsk,task_id)

	tsk.stage = curr_stage
end

function act_2_task_2_stage_7_status_f(tsk,task_id)

	tsk.stage = curr_stage
end

function act_2_task_2_stage_8_status_f(tsk,task_id)

	tsk.stage = curr_stage
end

function act_2_task_2_stage_9_status_f(tsk,task_id)

	tsk.stage = curr_stage
end

function act_2_task_2_stage_10_status_f(tsk,task_id)

	tsk.stage = curr_stage
end


-- ---------------------------------------------------------------------------------------------------------------------
-- Callbacks registration
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to register callbacks.
--- @return nil
function on_game_start()
	RegisterScriptCallback("save_state", save_state)
	RegisterScriptCallback("load_state", load_state)
	RegisterScriptCallback("on_key_press",progress_task)
	RegisterScriptCallback("on_key_press",regress_task)
	RegisterScriptCallback("on_key_press",spawn_dunn)
	RegisterScriptCallback("on_key_press",spawn_test_squads)

end


-- ---------------------------------------------------------------------------------------------------------------------
-- Data persistence
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to store information in the save file.
--- @param m_data table
--- @return nil
function save_state(m_data)

	-- Pre-process tables
	TASK_2_CACHE.available_time = (TASK_2_CACHE.available_time or 0) - time_global()

	dbg_printf("[WG] TASK_2_CACHE.available_time : %s", TASK_2_CACHE.available_time)

	-- Save tables
	m_data.wg_act_2_task_1_cache = TASK_1_CACHE
	m_data.wg_act_2_task_2_cache = TASK_2_CACHE
	m_data.wg_act_2_task_3_cache = TASK_3_CACHE

	m_data.curr_stage = curr_stage

	dbg_printf("[WG] Saved act 2 task variables")
end

--- Function used to load information stored in the save file.
--- @param m_data table
--- @return nil
function load_state(m_data)
	-- Retrieve tables
	TASK_1_CACHE = m_data.wg_act_2_task_1_cache or {}
	TASK_2_CACHE = m_data.wg_act_2_task_2_cache or {}
	TASK_3_CACHE = m_data.wg_act_2_task_3_cache or {}

	-- Post-process tables
	TASK_2_CACHE.available_time = (TASK_2_CACHE.available_time or 0) + time_global()

	dbg_printf("[WG] TASK_2_CACHE.available_time : %s", TASK_2_CACHE.available_time)

	curr_stage = m_data.curr_stage or 0

	dbg_printf("[WG] Loaded act 2 task variables")

	setup_act_2_task_2()
end


-- ---------------------------------------------------------------------------------------------------------------------
-- General functions
-- ---------------------------------------------------------------------------------------------------------------------

function setup_act_2_task_2()
	CreateTimeEvent("western_goods_setup_task", "act_2_task_2", math.random(30, 900), function ()
		local task_available = has_alife_info("western_goods_act_2_task_1_finished")
		local task_opted_in = has_alife_info("western_goods_act_2_task_2_opted_in")
		local task_not_setup = not has_alife_info("western_goods_act_2_task_2_setup")
		local timeout_ready = time_global() > TASK_2_CACHE.available_time

		dbg_printf("[WG] What's missing? task_available:%s task_opted_in:%s task_not_setup:%s timeout_ready:%s", task_available, task_opted_in, task_not_setup, timeout_ready)
		dbg_printf("[WG] Timeout ready? %s (%s vs %s)", timeout_ready, time_global(), TASK_2_CACHE.available_time)

		-- If the task is ready to be started
		if task_available and task_opted_in and task_not_setup and timeout_ready then
			dbg_printf("[WG] Act 2 task 2 available...")

			-- Give the task some time after loading the save
			start_task_2(se_object_by_sid("stalker_western_goods_trader"))
			dbg_printf("[WG] Act 2 task 2 started...")

			-- Send a message to the player
			dbg_printf("[WG] Act 2 Task 2 | Preparing message from %s", "Anonymous")
			send_dialog({
				{sender="Anonymous", icon="ui_inGame2_no_data", message=get_translation("st_wg_act_2_task_2_job_descr")}
			}, true)
			dbg_printf("[WG] Act 2 Task 2 | Message from %s ready", "Anonymous")

			give_info("western_goods_act_2_task_2_setup")
		end

		return true
	end)
end

curr_stage = 0

function progress_task(dik)
	if dik ~= DIK_keys.DIK_PRIOR then return end

	if curr_stage < 1 then
		curr_stage = curr_stage + 1
	end
end

function regress_task(dik)
	if dik ~= DIK_keys.DIK_NEXT then return end

	if curr_stage > 0 then
		curr_stage = curr_stage - 1
	end
end

function spawn_btr(x, y, z, lvid, gvid)
	local btr_se = alife_create("veh_btr", vector():set(x, y, z), lvid, gvid)

	logic_enforcer.assign(btr_se.id,'scripts\\tasks\\veh_idle.ltx','logic','ph_car@idle')

	dbg_printf("[WG] BTR spawned with id %s",btr_se.id)

	return btr_se
end

function spawn_dunn(dik)
	if dik ~= DIK_keys.DIK_L then return end

	local dunn = spawn_squad("stalker_dunn_lynn_squad", db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id())
end

function spawn_test_squads(dik)
	if dik ~= DIK_keys.DIK_P then return end

	--local smart = SIMBOARD.smarts_by_names["pri_sim_3"]
	--local squad = SIMBOARD:create_squad(smart,"western_goods_act_2_task_2_zombie_1_squad")

	--local smart = SIMBOARD.smarts_by_names["pri_sim_3"]
	--local squad = SIMBOARD:create_squad(smart,"western_goods_act_2_task_2_zombie_2_squad")

	local smart = SIMBOARD.smarts_by_names["pri_sim_3"]
	local squad = SIMBOARD:create_squad(smart,"western_goods_act_2_task_2_army_squad")

	local smart = SIMBOARD.smarts_by_names["pri_sim_3"]
	local squad = SIMBOARD:create_squad(smart,"western_goods_act_2_task_2_mono_squad")

	local btr_se = spawn_btr(-32.9, -0.5, 20.9, 155155, 4971)
	btr_se.angle = vector():set(0,-1.5708,0)

	--local smart = SIMBOARD.smarts_by_names["pri_b301"]
	--local squad = SIMBOARD:create_squad(smart,"western_goods_act_2_task_2_snork_squad")
	--local squad = spawn_squad("western_goods_act_2_task_2_snork_squad", vector():set(25.842678070068,-4.3245229721069,123.48170471191), 231878, 4970)

	--local smart = SIMBOARD.smarts_by_names["pri_b301"]
	--local squad = SIMBOARD:create_squad(smart,"western_goods_act_2_task_2_bandit_1_squad")

end

