--[[
-- Info
-- 
-- Original Author(s) : NLTP_ASHES
-- Edited : N/A
-- Date : 22/01/2023
-- License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)
-- 
-- Script used to manage the tasks of the Western Goods addon.
--]]

--[[----------------------------------------------------------------------------------------------------
	Constants, global variables and imported functions
------------------------------------------------------------------------------------------------------]]

-- Imported functions
local get_translation = game.translate_string
local dbg_printf = western_goods_utils.dbg_printf
local get_distance = western_goods_utils.get_distance
local find_object_by_id = western_goods_utils.find_object_by_id
local CreatePersistentTimeEvent = western_goods_persistent_timed_events.CreatePersistentTimeEvent
local heli_spawn = western_goods_helicopter.heli_spawn
local heli_register = western_goods_helicopter.heli_register
local spawn_story_squad = western_goods_utils.spawn_story_squad
local spawn_squad = western_goods_utils.spawn_squad
local spawn_dead_squad = western_goods_utils.spawn_dead_squad
local get_member_id_from_squad = western_goods_utils.get_member_id_from_squad
local get_member_from_squad = western_goods_utils.get_member_from_squad
local find_unique_npc = western_goods_utils.find_unique_npc
local find_npc_in_actor_squad = western_goods_utils.find_npc_in_actor_squad
local send_dialog = western_goods_dialogs_manager.send_dialog

-- Task variables
local TASK_1_CACHE = {}
local TASK_2_CACHE = {}
local TASK_3_CACHE = {}

--[[----------------------------------------------------------------------------------------------------
	ACT 2 - RETRIEVAL MISSION

	TASK 1 - RETRIEVE THE DOCUMENTS
------------------------------------------------------------------------------------------------------]]

-- Function used to retrieve the title of the mission (displayed in the PDA).
function task_functor.act_2_task_1_title_f(task_id,field,p,tsk)
	return game.translate_string("st_wg_trader_act_2_task_1_title")
end

-- Function used to retrieve the description of the mission (displayed in the PDA).
-- Warning : naming contract on the translation string : st_wg_trader_act_2_task_1_stage_<stage>_descr
function task_functor.act_2_task_1_descr_f(task_id,field,p,tsk)
	return game.translate_string("st_wg_trader_act_2_task_1_stage_" .. tostring(tsk.stage) .. "_descr")
end

-- Function used to retrieve the target of the mission (marker displayed (or not) in the PDA).
function task_functor.act_2_task_1_target_f(task_id,field,p,tsk)
	if tsk.stage == 0 then
		return TASK_1_CACHE.btr_id
	end
	if tsk.stage == 1 then
		return tsk.task_giver_id
	end
end

-- Function used to manage the mission logic as a whole.
function task_status_functor.act_2_task_1_status_f(tsk,task_id)

	-- First stage :
	if tsk.stage == 0 then
		return act_2_task_1_stage_0_status_f(tsk,task_id)
	end

	-- Second stage :
	if tsk.stage == 1 then
		return act_2_task_1_stage_1_status_f(tsk,task_id)
	end
end

function act_2_task_1_stage_0_status_f(tsk,task_id)

	if not TASK_1_CACHE.btr_spawned then
		local sec = "veh_btr"
		local pos = vector():set(-174.8,-0.6,-6.8)
		local lvid = 38003
		local gvid = 4991
		local btr_se = alife_create(sec, pos, lvid, gvid)

		logic_enforcer.assign(btr_se.id,'scripts\\tasks\\veh_idle.ltx','logic','ph_car@idle')

		TASK_1_CACHE.btr_id = btr_se.id
		TASK_1_CACHE.btr_spawned = true

		dbg_printf("[WG] BTR spawned with id %s",btr_se.id)

		return
	end

	if not TASK_1_CACHE.killer_squad_spawned then
		local sec = "killer_sim_squad_alpha"
		local pos = vector():set(-168.8,-0.5,-24.3)
		local lvid = 42026
		local gvid = 4962
		local squad_se = spawn_squad(sec, pos, lvid, gvid)

		squad_se.scripted_target = "lim_smart_terrain_6"

		TASK_1_CACHE.killer_squad_id = squad_se.id
		TASK_1_CACHE.killer_squad_spawned = true

		dbg_printf("[WG] Killer squad spawned with id %s",squad_se.id)

		return
	end

	tsk.stage = 1
end

function act_2_task_1_stage_1_status_f(tsk,task_id)
	local btr_se = TASK_1_CACHE.btr_id and alife_object(TASK_1_CACHE.btr_id)
	local btr_obj = btr_se and find_object_by_id(btr_se.id)

	local killer_squad_se = TASK_1_CACHE.killer_squad_id and alife_object(TASK_1_CACHE.killer_squad_id)
	local one_of_squad_se = killer_squad_se and get_member_from_squad(killer_squad_se)
	local one_of_squad_obj = one_of_squad_se and find_object_by_id(one_of_squad_se.id)

	if btr_obj and one_of_squad_obj and not TASK_1_CACHE.destroy_btr_order_given then

		dbg_printf("[WG] Giving order to %s to destroy BTR %s",one_of_squad_obj:id(),btr_obj:id())

		-- do stuff

		dbg_printf("[WG] Order given to %s to destroy BTR %s",one_of_squad_obj:id(),btr_obj:id())

		TASK_1_CACHE.destroy_btr_order_given = true
	end
end


--[[----------------------------------------------------------------------------------------------------
	Callbacks registration
------------------------------------------------------------------------------------------------------]]

function on_game_start()
	RegisterScriptCallback("save_state", save_state)
	RegisterScriptCallback("load_state", load_state)
end


--[[----------------------------------------------------------------------------------------------------
	Data persistence
------------------------------------------------------------------------------------------------------]]

function save_state(m_data)
	m_data.wg_act_2_task_1_cache = TASK_1_CACHE
	m_data.wg_act_2_task_2_cache = TASK_2_CACHE
	m_data.wg_act_2_task_3_cache = TASK_3_CACHE
	dbg_printf("[WG] Saved act 2 task variables")
end

function load_state(m_data)
	TASK_1_CACHE = m_data.wg_act_1_tasks_cache
	TASK_2_CACHE = m_data.wg_act_2_tasks_cache
	TASK_3_CACHE = m_data.wg_act_3_tasks_cache
	dbg_printf("[WG] Loaded act 2 task variables")
end


--[[----------------------------------------------------------------------------------------------------
	General functions
------------------------------------------------------------------------------------------------------]]
