---[[
--- Original Author(s) : NLTP_ASHES
--- Edited : N/A
--- Date : 03/03/2023
--- License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)
---
--- Script used to manage the tasks of the Western Goods addon.
---]]

--[[----------------------------------------------------------------------------------------------------
	Constants, global variables and imported functions
------------------------------------------------------------------------------------------------------]]

-- Imported functions
local get_translation = game.translate_string
local dbg_printf = western_goods_utils.dbg_printf
local get_distance = western_goods_utils.get_distance
local find_object_by_id = western_goods_utils.find_object_by_id
local CreatePersistentTimeEvent = western_goods_persistent_timed_events.CreatePersistentTimeEvent
local heli_spawn = western_goods_helicopter.heli_spawn
local heli_register = western_goods_helicopter.heli_register
local spawn_story_squad = western_goods_utils.spawn_story_squad
local spawn_squad = western_goods_utils.spawn_squad
local spawn_dead_squad = western_goods_utils.spawn_dead_squad
local get_member_id_from_squad = western_goods_utils.get_member_id_from_squad
local get_member_from_squad = western_goods_utils.get_member_from_squad
local find_unique_npc = western_goods_utils.find_unique_npc
local find_npc_in_actor_squad = western_goods_utils.find_npc_in_actor_squad
local send_dialog = western_goods_dialogs_manager.send_dialog

-- Task variables
TASK_1_CACHE = {}
TASK_2_CACHE = {}
TASK_3_CACHE = {}

--[[----------------------------------------------------------------------------------------------------
	ACT 2 - CONTRACT WORK

	TASK 1 - KOLOBOK
------------------------------------------------------------------------------------------------------]]

--- Function used to retrieve the title of the mission (displayed in the PDA).
--- @param task_id number
--- @param field string
--- @param p any
--- @param tsk CGameTask
--- @return string
function task_functor.act_2_task_1_title_f(task_id,field,p,tsk)
	return game.translate_string("st_wg_act_2_task_1_title")
end

--- Function used to retrieve the description of the mission (displayed in the PDA).
--- Warning : naming contract on the translation string : st_wg_trader_act_2_task_1_stage_<stage>_descr.
--- @param task_id number
--- @param field string
--- @param p any
--- @param tsk CGameTask
--- @return string
function task_functor.act_2_task_1_descr_f(task_id,field,p,tsk)
	return game.translate_string("st_wg_act_2_task_1_stage_" .. tostring(tsk.stage) .. "_descr")
end

--- Function used to retrieve the target of the mission (marker displayed (or not) in the PDA).
--- @param task_id number
--- @param field string
--- @param p any
--- @param tsk CGameTask
--- @return number
function task_functor.act_2_task_1_target_f(task_id,field,p,tsk)
	if tsk.stage == 0 then
		return nil
	end
	if tsk.stage == 1 then
		return tsk.task_giver_id
	end
end

--- Function used to manage the mission logic as a whole.
--- @param tsk CGameTask
--- @param task_id number
--- @return string
function task_status_functor.act_2_task_1_status_f(tsk,task_id)

	-- First stage :
	if tsk.stage == 0 then
		return act_2_task_1_stage_0_status_f(tsk,task_id)
	end

	-- Second stage :
	if tsk.stage == 1 then
		return act_2_task_1_stage_1_status_f(tsk,task_id)
	end
end

function act_2_task_1_stage_0_status_f(tsk,task_id)

	disable_info("western_goods_act_2_task_1_ready_finished")

	tsk.stage = curr_stage
end

function act_2_task_1_stage_1_status_f(tsk,task_id)

	give_info("western_goods_act_2_task_1_ready_finished")

	tsk.stage = curr_stage
end


--[[----------------------------------------------------------------------------------------------------
	TASK 2 - RETRIEVAL MISSION
------------------------------------------------------------------------------------------------------]]

--- Function used to retrieve the title of the mission (displayed in the PDA).
--- @param task_id number
--- @param field string
--- @param p any
--- @param tsk CGameTask
--- @return string
function task_functor.act_2_task_2_title_f(task_id,field,p,tsk)
	return game.translate_string("st_wg_act_2_task_2_title")
end

--- Function used to retrieve the description of the mission (displayed in the PDA).
--- Warning : naming contract on the translation string : st_wg_trader_act_2_task_2_stage_<stage>_descr.
--- @param task_id number
--- @param field string
--- @param p any
--- @param tsk CGameTask
--- @return string
function task_functor.act_2_task_2_descr_f(task_id,field,p,tsk)
	return game.translate_string("st_wg_act_2_task_2_stage_" .. tostring(tsk.stage) .. "_descr")
end

--- Function used to retrieve the target of the mission (marker displayed (or not) in the PDA).
--- @param task_id number
--- @param field string
--- @param p any
--- @param tsk CGameTask
--- @return number
function task_functor.act_2_task_2_target_f(task_id,field,p,tsk)
	if tsk.stage == 0 then
		return nil
	end
	if tsk.stage == 1 then
		return nil
	end
	if tsk.stage == 2 then
		return nil
	end
	if tsk.stage == 3 then
		return nil
	end
	if tsk.stage == 4 then
		return nil
	end
	if tsk.stage == 5 then
		return nil
	end
	if tsk.stage == 6 then
		return nil
	end
	if tsk.stage == 7 then
		return nil
	end
	if tsk.stage == 8 then
		return nil
	end
	if tsk.stage == 9 then
		return nil
	end
	if tsk.stage == 10 then
		return tsk.task_giver_id
	end
end

--- Function used to manage the mission logic as a whole.
--- @param tsk CGameTask
--- @param task_id number
--- @return string
function task_status_functor.act_2_task_2_status_f(tsk,task_id)

	-- First stage :
	if tsk.stage == 0 then
		return act_2_task_2_stage_0_status_f(tsk,task_id)
	end

	-- Second stage :
	if tsk.stage == 1 then
		return act_2_task_2_stage_1_status_f(tsk,task_id)
	end

	-- Third stage :
	if tsk.stage == 2 then
		return act_2_task_2_stage_2_status_f(tsk,task_id)
	end

	-- Fourth stage :
	if tsk.stage == 3 then
		return act_2_task_2_stage_3_status_f(tsk,task_id)
	end

	-- Fifth stage :
	if tsk.stage == 4 then
		return act_2_task_2_stage_4_status_f(tsk,task_id)
	end

	-- Sixth stage :
	if tsk.stage == 5 then
		return act_2_task_2_stage_5_status_f(tsk,task_id)
	end

	-- Seventh stage :
	if tsk.stage == 6 then
		return act_2_task_2_stage_6_status_f(tsk,task_id)
	end

	-- Eighth stage :
	if tsk.stage == 7 then
		return act_2_task_2_stage_7_status_f(tsk,task_id)
	end

	-- Ninth stage :
	if tsk.stage == 8 then
		return act_2_task_2_stage_8_status_f(tsk,task_id)
	end

	-- Tenth stage :
	if tsk.stage == 9 then
		return act_2_task_2_stage_9_status_f(tsk,task_id)
	end

	-- Eleventh stage :
	if tsk.stage == 10 then
		return act_2_task_2_stage_10_status_f(tsk,task_id)
	end
end

function act_2_task_2_stage_0_status_f(tsk,task_id)

	tsk.stage = curr_stage
end

function act_2_task_2_stage_1_status_f(tsk,task_id)

	tsk.stage = curr_stage
end

function act_2_task_2_stage_2_status_f(tsk,task_id)

	tsk.stage = curr_stage
end

function act_2_task_2_stage_3_status_f(tsk,task_id)

	tsk.stage = curr_stage
end

function act_2_task_2_stage_4_status_f(tsk,task_id)

	tsk.stage = curr_stage
end

function act_2_task_2_stage_5_status_f(tsk,task_id)

	tsk.stage = curr_stage
end

function act_2_task_2_stage_6_status_f(tsk,task_id)

	tsk.stage = curr_stage
end

function act_2_task_2_stage_7_status_f(tsk,task_id)

	tsk.stage = curr_stage
end

function act_2_task_2_stage_8_status_f(tsk,task_id)

	tsk.stage = curr_stage
end

function act_2_task_2_stage_9_status_f(tsk,task_id)

	tsk.stage = curr_stage
end

function act_2_task_2_stage_10_status_f(tsk,task_id)

	tsk.stage = curr_stage
end


--[[----------------------------------------------------------------------------------------------------
	Callbacks registration
------------------------------------------------------------------------------------------------------]]

--- Function used to register callbacks.
--- @return nil
function on_game_start()
	RegisterScriptCallback("save_state", save_state)
	RegisterScriptCallback("load_state", load_state)
	RegisterScriptCallback("on_key_press",progress_task)
	RegisterScriptCallback("on_key_press",regress_task)
end


--[[----------------------------------------------------------------------------------------------------
	Data persistence
------------------------------------------------------------------------------------------------------]]

--- Function used to store information in the save file.
--- @param m_data table
--- @return nil
function save_state(m_data)
	m_data.wg_act_2_task_1_cache = TASK_1_CACHE
	m_data.wg_act_2_task_2_cache = TASK_2_CACHE
	m_data.wg_act_2_task_3_cache = TASK_3_CACHE

	m_data.curr_stage = curr_stage

	dbg_printf("[WG] Saved act 2 task variables")
end

--- Function used to load information stored in the save file.
--- @param m_data table
--- @return nil
function load_state(m_data)
	TASK_1_CACHE = m_data.wg_act_2_task_1_cache or {}
	TASK_2_CACHE = m_data.wg_act_2_task_2_cache or {}
	TASK_3_CACHE = m_data.wg_act_2_task_3_cache or {}

	curr_stage = m_data.curr_stage or 0

	dbg_printf("[WG] Loaded act 2 task variables")
end


--[[----------------------------------------------------------------------------------------------------
	General functions
------------------------------------------------------------------------------------------------------]]

function start_task_1(first_speaker, second_speaker)
	local npc = dialogs.who_is_npc(first_speaker, second_speaker)
	task_manager.get_task_manager():give_task("western_goods_act_2_task_1", npc:id())
end

function end_task_1()
	task_manager.get_task_manager():set_task_completed("western_goods_act_2_task_1")
end

function start_task_2(first_speaker, second_speaker)
	local npc = dialogs.who_is_npc(first_speaker, second_speaker)
	task_manager.get_task_manager():give_task("western_goods_act_2_task_2", npc:id())
end

function end_task_2()
	task_manager.get_task_manager():set_task_completed("western_goods_act_2_task_2")
end

--[[
	local btr_se = alife_create("veh_btr", vector():set(-174.8,-0.6,-6.8), 38003, 4991)

	logic_enforcer.assign(btr_se.id,'scripts\\tasks\\veh_idle.ltx','logic','ph_car@idle')

	TASK_1_CACHE.btr_id = btr_se.id
	TASK_1_CACHE.btr_spawned = true

	dbg_printf("[WG] BTR spawned with id %s",btr_se.id)

	return
--]]

curr_stage = 0

function progress_task(dik)
	if dik ~= DIK_keys.DIK_PRIOR then return end

	if curr_stage < 1 then
		curr_stage = curr_stage + 1
	end
end

function regress_task(dik)
	if dik ~= DIK_keys.DIK_NEXT then return end

	if curr_stage > 0 then
		curr_stage = curr_stage - 1
	end
end